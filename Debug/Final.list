
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006050  08006050  00007050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006218  08006218  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006218  08006218  00007218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006220  08006220  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006220  08006220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006224  08006224  00007224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006228  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00013170  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200131d0  200131d0  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db56  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281b  00000000  00000000  00015be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  00018408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000936  00000000  00000000  00019018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003091  00000000  00000000  0001994e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef65  00000000  00000000  0001c9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca7c5  00000000  00000000  0002b944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f6109  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000356c  00000000  00000000  000f614c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000f96b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006038 	.word	0x08006038

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006038 	.word	0x08006038

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ESP8266_SendCommand>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ESP8266_SendCommand(char *cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	myprintf(&huart2, "Send command: %s\r\n", cmd);
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	4906      	ldr	r1, [pc, #24]	@ (8000594 <ESP8266_SendCommand+0x24>)
 800057c:	4806      	ldr	r0, [pc, #24]	@ (8000598 <ESP8266_SendCommand+0x28>)
 800057e:	f000 fb11 	bl	8000ba4 <myprintf>
    myprintf(&huart6, "%s\r\n", cmd);
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4905      	ldr	r1, [pc, #20]	@ (800059c <ESP8266_SendCommand+0x2c>)
 8000586:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <ESP8266_SendCommand+0x30>)
 8000588:	f000 fb0c 	bl	8000ba4 <myprintf>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	08006050 	.word	0x08006050
 8000598:	2000007c 	.word	0x2000007c
 800059c:	08006064 	.word	0x08006064
 80005a0:	2000010c 	.word	0x2000010c

080005a4 <ESP8266_ReadResponse>:

void ESP8266_ReadResponse()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
    memset(resp, '\0', resp_len);
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	2100      	movs	r1, #0
 80005ae:	481b      	ldr	r0, [pc, #108]	@ (800061c <ESP8266_ReadResponse+0x78>)
 80005b0:	f005 f89e 	bl	80056f0 <memset>
    if_resp_callback = 0;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <ESP8266_ReadResponse+0x7c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
    if_resp_timeout = 0;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <ESP8266_ReadResponse+0x80>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
    resp_index = 0;
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <ESP8266_ReadResponse+0x84>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]

    HAL_UART_Receive_IT(&huart6, (uint8_t *)&resp[resp_index], 1);
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <ESP8266_ReadResponse+0x84>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a14      	ldr	r2, [pc, #80]	@ (800061c <ESP8266_ReadResponse+0x78>)
 80005cc:	4413      	add	r3, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	4619      	mov	r1, r3
 80005d2:	4816      	ldr	r0, [pc, #88]	@ (800062c <ESP8266_ReadResponse+0x88>)
 80005d4:	f001 fd73 	bl	80020be <HAL_UART_Receive_IT>

    uint32_t start_time = HAL_GetTick();
 80005d8:	f000 fcd8 	bl	8000f8c <HAL_GetTick>
 80005dc:	6078      	str	r0, [r7, #4]

    while (if_resp_callback == 0) {
 80005de:	e00b      	b.n	80005f8 <ESP8266_ReadResponse+0x54>
        if (HAL_GetTick() - start_time > 2000) {
 80005e0:	f000 fcd4 	bl	8000f8c <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80005ee:	d903      	bls.n	80005f8 <ESP8266_ReadResponse+0x54>
            if_resp_timeout = 1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <ESP8266_ReadResponse+0x80>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	601a      	str	r2, [r3, #0]
            break;
 80005f6:	e003      	b.n	8000600 <ESP8266_ReadResponse+0x5c>
    while (if_resp_callback == 0) {
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <ESP8266_ReadResponse+0x7c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0ef      	beq.n	80005e0 <ESP8266_ReadResponse+0x3c>
        }
    }
    vTaskDelay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000604:	f003 fb98 	bl	8003d38 <vTaskDelay>
    myprintf(&huart2, "Received: %s\r\n", resp);
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <ESP8266_ReadResponse+0x78>)
 800060a:	4909      	ldr	r1, [pc, #36]	@ (8000630 <ESP8266_ReadResponse+0x8c>)
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <ESP8266_ReadResponse+0x90>)
 800060e:	f000 fac9 	bl	8000ba4 <myprintf>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000154 	.word	0x20000154
 8000620:	200001d4 	.word	0x200001d4
 8000624:	200001d8 	.word	0x200001d8
 8000628:	200001dc 	.word	0x200001dc
 800062c:	2000010c 	.word	0x2000010c
 8000630:	0800606c 	.word	0x0800606c
 8000634:	2000007c 	.word	0x2000007c

08000638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	// Skip storing \r in first byte
	if (huart->Instance == USART6) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <HAL_UART_RxCpltCallback+0x94>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d13d      	bne.n	80006c6 <HAL_UART_RxCpltCallback+0x8e>
		uint8_t byte = (uint8_t)huart->Instance->DR;  // or however you read the data
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	73fb      	strb	r3, [r7, #15]

		// Skip first \r, \n
		if (resp_index == 0 && (byte == '\r' || byte == '\n')) {
 8000652:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10f      	bne.n	800067a <HAL_UART_RxCpltCallback+0x42>
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	2b0d      	cmp	r3, #13
 800065e:	d002      	beq.n	8000666 <HAL_UART_RxCpltCallback+0x2e>
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	2b0a      	cmp	r3, #10
 8000664:	d109      	bne.n	800067a <HAL_UART_RxCpltCallback+0x42>
			HAL_UART_Receive_IT(&huart6, (uint8_t *)&resp[resp_index], 1);
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1a      	ldr	r2, [pc, #104]	@ (80006d4 <HAL_UART_RxCpltCallback+0x9c>)
 800066c:	4413      	add	r3, r2
 800066e:	2201      	movs	r2, #1
 8000670:	4619      	mov	r1, r3
 8000672:	4819      	ldr	r0, [pc, #100]	@ (80006d8 <HAL_UART_RxCpltCallback+0xa0>)
 8000674:	f001 fd23 	bl	80020be <HAL_UART_Receive_IT>
			return;
 8000678:	e025      	b.n	80006c6 <HAL_UART_RxCpltCallback+0x8e>
		}

		resp[resp_index] = byte;
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4915      	ldr	r1, [pc, #84]	@ (80006d4 <HAL_UART_RxCpltCallback+0x9c>)
 8000680:	7bfa      	ldrb	r2, [r7, #15]
 8000682:	54ca      	strb	r2, [r1, r3]
		resp_index++;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a11      	ldr	r2, [pc, #68]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 800068c:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT(&huart6, (uint8_t *)&resp[resp_index], 1);
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <HAL_UART_RxCpltCallback+0x9c>)
 8000694:	4413      	add	r3, r2
 8000696:	2201      	movs	r2, #1
 8000698:	4619      	mov	r1, r3
 800069a:	480f      	ldr	r0, [pc, #60]	@ (80006d8 <HAL_UART_RxCpltCallback+0xa0>)
 800069c:	f001 fd0f 	bl	80020be <HAL_UART_Receive_IT>

		if (resp[resp_index - 1] == '\n' || if_resp_timeout == 1) {
 80006a0:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	4a0b      	ldr	r2, [pc, #44]	@ (80006d4 <HAL_UART_RxCpltCallback+0x9c>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d003      	beq.n	80006b6 <HAL_UART_RxCpltCallback+0x7e>
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <HAL_UART_RxCpltCallback+0xa4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d107      	bne.n	80006c6 <HAL_UART_RxCpltCallback+0x8e>
			resp[resp_index] = '\0';
 80006b6:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <HAL_UART_RxCpltCallback+0x98>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <HAL_UART_RxCpltCallback+0x9c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	54d1      	strb	r1, [r2, r3]
			if_resp_callback = 1;
 80006c0:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <HAL_UART_RxCpltCallback+0xa8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40011400 	.word	0x40011400
 80006d0:	200001dc 	.word	0x200001dc
 80006d4:	20000154 	.word	0x20000154
 80006d8:	2000010c 	.word	0x2000010c
 80006dc:	200001d8 	.word	0x200001d8
 80006e0:	200001d4 	.word	0x200001d4

080006e4 <showIP_task>:
void showIP_task(void *pvParameters)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    esp8266_state_t state = STATE_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	75fb      	strb	r3, [r7, #23]
    int retry = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

    while (1) {
        switch (state) {
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	f200 80ce 	bhi.w	8000898 <showIP_task+0x1b4>
 80006fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000704 <showIP_task+0x20>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000721 	.word	0x08000721
 8000708:	0800075f 	.word	0x0800075f
 800070c:	08000779 	.word	0x08000779
 8000710:	080007d3 	.word	0x080007d3
 8000714:	08000813 	.word	0x08000813
 8000718:	08000823 	.word	0x08000823
 800071c:	0800083b 	.word	0x0800083b
        case STATE_RESET:
            ESP8266_SendCommand("AT+RST");
 8000720:	4861      	ldr	r0, [pc, #388]	@ (80008a8 <showIP_task+0x1c4>)
 8000722:	f7ff ff25 	bl	8000570 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 8000726:	f7ff ff3d 	bl	80005a4 <ESP8266_ReadResponse>
            if (strstr(resp, "OK")) {
 800072a:	4960      	ldr	r1, [pc, #384]	@ (80008ac <showIP_task+0x1c8>)
 800072c:	4860      	ldr	r0, [pc, #384]	@ (80008b0 <showIP_task+0x1cc>)
 800072e:	f004 fff4 	bl	800571a <strstr>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d004      	beq.n	8000742 <showIP_task+0x5e>
                state = STATE_INIT;
 8000738:	2301      	movs	r3, #1
 800073a:	75fb      	strb	r3, [r7, #23]
                retry = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
            } else if (++retry > 3) {
                myprintf(&huart2, "Reset failed, retrying...\r\n");
                retry = 0;
            }
            break;
 8000740:	e0ad      	b.n	800089e <showIP_task+0x1ba>
            } else if (++retry > 3) {
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	3301      	adds	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	2b03      	cmp	r3, #3
 800074c:	f340 80a7 	ble.w	800089e <showIP_task+0x1ba>
                myprintf(&huart2, "Reset failed, retrying...\r\n");
 8000750:	4958      	ldr	r1, [pc, #352]	@ (80008b4 <showIP_task+0x1d0>)
 8000752:	4859      	ldr	r0, [pc, #356]	@ (80008b8 <showIP_task+0x1d4>)
 8000754:	f000 fa26 	bl	8000ba4 <myprintf>
                retry = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
            break;
 800075c:	e09f      	b.n	800089e <showIP_task+0x1ba>

        case STATE_INIT:
            ESP8266_SendCommand("AT");  // Test AT startup
 800075e:	4857      	ldr	r0, [pc, #348]	@ (80008bc <showIP_task+0x1d8>)
 8000760:	f7ff ff06 	bl	8000570 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 8000764:	f7ff ff1e 	bl	80005a4 <ESP8266_ReadResponse>
            ESP8266_SendCommand("AT+CWMODE=1");  // Set station mode
 8000768:	4855      	ldr	r0, [pc, #340]	@ (80008c0 <showIP_task+0x1dc>)
 800076a:	f7ff ff01 	bl	8000570 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 800076e:	f7ff ff19 	bl	80005a4 <ESP8266_ReadResponse>
            state = STATE_JOIN_WIFI;
 8000772:	2302      	movs	r3, #2
 8000774:	75fb      	strb	r3, [r7, #23]
            break;
 8000776:	e095      	b.n	80008a4 <showIP_task+0x1c0>

        case STATE_JOIN_WIFI:
            ESP8266_SendCommand("AT+CWJAP=\"ALGO\",\"algoalgo\"");
 8000778:	4852      	ldr	r0, [pc, #328]	@ (80008c4 <showIP_task+0x1e0>)
 800077a:	f7ff fef9 	bl	8000570 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 800077e:	f7ff ff11 	bl	80005a4 <ESP8266_ReadResponse>
            if (strstr(resp + 1, "WIFI CONNECTED") || strstr(resp + 1, "OK")) {
 8000782:	4b51      	ldr	r3, [pc, #324]	@ (80008c8 <showIP_task+0x1e4>)
 8000784:	4951      	ldr	r1, [pc, #324]	@ (80008cc <showIP_task+0x1e8>)
 8000786:	4618      	mov	r0, r3
 8000788:	f004 ffc7 	bl	800571a <strstr>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d107      	bne.n	80007a2 <showIP_task+0xbe>
 8000792:	4b4d      	ldr	r3, [pc, #308]	@ (80008c8 <showIP_task+0x1e4>)
 8000794:	4945      	ldr	r1, [pc, #276]	@ (80008ac <showIP_task+0x1c8>)
 8000796:	4618      	mov	r0, r3
 8000798:	f004 ffbf 	bl	800571a <strstr>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <showIP_task+0xc8>
                state = STATE_CHECK_STATUS;
 80007a2:	2303      	movs	r3, #3
 80007a4:	75fb      	strb	r3, [r7, #23]
                retry = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e00d      	b.n	80007c8 <showIP_task+0xe4>
            } else if (++retry > 5) {
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	3301      	adds	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	dd07      	ble.n	80007c8 <showIP_task+0xe4>
                myprintf(&huart2, "WiFi join failed, retrying...\r\n");
 80007b8:	4945      	ldr	r1, [pc, #276]	@ (80008d0 <showIP_task+0x1ec>)
 80007ba:	483f      	ldr	r0, [pc, #252]	@ (80008b8 <showIP_task+0x1d4>)
 80007bc:	f000 f9f2 	bl	8000ba4 <myprintf>
                state = STATE_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	75fb      	strb	r3, [r7, #23]
                retry = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
            }
            vTaskDelay(1500);
 80007c8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007cc:	f003 fab4 	bl	8003d38 <vTaskDelay>
            break;
 80007d0:	e068      	b.n	80008a4 <showIP_task+0x1c0>

        case STATE_CHECK_STATUS:
            ESP8266_SendCommand("AT+CIPSTATUS");
 80007d2:	4840      	ldr	r0, [pc, #256]	@ (80008d4 <showIP_task+0x1f0>)
 80007d4:	f7ff fecc 	bl	8000570 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 80007d8:	f7ff fee4 	bl	80005a4 <ESP8266_ReadResponse>
            if (strstr(resp + 1, "STATUS:2") || strstr(resp + 1, "STATUS:3") || strstr(resp + 1, "OK")) {
 80007dc:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <showIP_task+0x1e4>)
 80007de:	493e      	ldr	r1, [pc, #248]	@ (80008d8 <showIP_task+0x1f4>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 ff9a 	bl	800571a <strstr>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10f      	bne.n	800080c <showIP_task+0x128>
 80007ec:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <showIP_task+0x1e4>)
 80007ee:	493b      	ldr	r1, [pc, #236]	@ (80008dc <showIP_task+0x1f8>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 ff92 	bl	800571a <strstr>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d107      	bne.n	800080c <showIP_task+0x128>
 80007fc:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <showIP_task+0x1e4>)
 80007fe:	492b      	ldr	r1, [pc, #172]	@ (80008ac <showIP_task+0x1c8>)
 8000800:	4618      	mov	r0, r3
 8000802:	f004 ff8a 	bl	800571a <strstr>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d04a      	beq.n	80008a2 <showIP_task+0x1be>
                state = STATE_GET_IP;
 800080c:	2304      	movs	r3, #4
 800080e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8000810:	e047      	b.n	80008a2 <showIP_task+0x1be>

        case STATE_GET_IP:
            ESP8266_SendCommand("AT+CIFSR");
 8000812:	4833      	ldr	r0, [pc, #204]	@ (80008e0 <showIP_task+0x1fc>)
 8000814:	f7ff feac 	bl	8000570 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 8000818:	f7ff fec4 	bl	80005a4 <ESP8266_ReadResponse>
            state = STATE_CONNECT_TCP;
 800081c:	2305      	movs	r3, #5
 800081e:	75fb      	strb	r3, [r7, #23]
            break;
 8000820:	e040      	b.n	80008a4 <showIP_task+0x1c0>
        case STATE_CONNECT_TCP:
        	ESP8266_SendCommand("AT+CIPMUX=0");
 8000822:	4830      	ldr	r0, [pc, #192]	@ (80008e4 <showIP_task+0x200>)
 8000824:	f7ff fea4 	bl	8000570 <ESP8266_SendCommand>
        	ESP8266_ReadResponse();
 8000828:	f7ff febc 	bl	80005a4 <ESP8266_ReadResponse>
        	ESP8266_SendCommand("AT+CIPSTART=\"TCP\",\"192.168.0.154\",5000");
 800082c:	482e      	ldr	r0, [pc, #184]	@ (80008e8 <showIP_task+0x204>)
 800082e:	f7ff fe9f 	bl	8000570 <ESP8266_SendCommand>
        	ESP8266_ReadResponse();
 8000832:	f7ff feb7 	bl	80005a4 <ESP8266_ReadResponse>
        	state = STATE_DONE;
 8000836:	2306      	movs	r3, #6
 8000838:	75fb      	strb	r3, [r7, #23]
        case STATE_DONE:
            ESP8266_ReadResponse();  // Check for any +IPD data
 800083a:	f7ff feb3 	bl	80005a4 <ESP8266_ReadResponse>
            char *data_start = strstr(resp, "+IPD,");
 800083e:	492b      	ldr	r1, [pc, #172]	@ (80008ec <showIP_task+0x208>)
 8000840:	481b      	ldr	r0, [pc, #108]	@ (80008b0 <showIP_task+0x1cc>)
 8000842:	f004 ff6a 	bl	800571a <strstr>
 8000846:	60f8      	str	r0, [r7, #12]
            if (data_start) {
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d012      	beq.n	8000874 <showIP_task+0x190>
                data_start = strchr(data_start, ':');
 800084e:	213a      	movs	r1, #58	@ 0x3a
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f004 ff55 	bl	8005700 <strchr>
 8000856:	60f8      	str	r0, [r7, #12]
                if (data_start) {
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d007      	beq.n	800086e <showIP_task+0x18a>
                    data_start++;  // Skip the ':'
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
                    myprintf(&huart2, "Received from PC: %s\r\n", data_start);
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	4922      	ldr	r1, [pc, #136]	@ (80008f0 <showIP_task+0x20c>)
 8000868:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <showIP_task+0x1d4>)
 800086a:	f000 f99b 	bl	8000ba4 <myprintf>
                }
                state = STATE_DONE;
 800086e:	2306      	movs	r3, #6
 8000870:	75fb      	strb	r3, [r7, #23]
                break;
 8000872:	e017      	b.n	80008a4 <showIP_task+0x1c0>
            }else if(strstr(resp, "LOSED")) { // Handle lost the connect to server
 8000874:	491f      	ldr	r1, [pc, #124]	@ (80008f4 <showIP_task+0x210>)
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <showIP_task+0x1cc>)
 8000878:	f004 ff4f 	bl	800571a <strstr>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <showIP_task+0x1a4>
            	state = STATE_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	75fb      	strb	r3, [r7, #23]
            	break;
 8000886:	e00d      	b.n	80008a4 <showIP_task+0x1c0>
            }else{
            	myprintf(&huart2, "Unexpected response: %s\r\n", data_start);
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	491b      	ldr	r1, [pc, #108]	@ (80008f8 <showIP_task+0x214>)
 800088c:	480a      	ldr	r0, [pc, #40]	@ (80008b8 <showIP_task+0x1d4>)
 800088e:	f000 f989 	bl	8000ba4 <myprintf>
				state = STATE_DONE;
 8000892:	2306      	movs	r3, #6
 8000894:	75fb      	strb	r3, [r7, #23]
				break;
 8000896:	e005      	b.n	80008a4 <showIP_task+0x1c0>
            }
        default:
            state = STATE_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	75fb      	strb	r3, [r7, #23]
            break;
 800089c:	e002      	b.n	80008a4 <showIP_task+0x1c0>
            break;
 800089e:	bf00      	nop
 80008a0:	e728      	b.n	80006f4 <showIP_task+0x10>
            break;
 80008a2:	bf00      	nop
        switch (state) {
 80008a4:	e726      	b.n	80006f4 <showIP_task+0x10>
 80008a6:	bf00      	nop
 80008a8:	0800607c 	.word	0x0800607c
 80008ac:	08006084 	.word	0x08006084
 80008b0:	20000154 	.word	0x20000154
 80008b4:	08006088 	.word	0x08006088
 80008b8:	2000007c 	.word	0x2000007c
 80008bc:	080060a4 	.word	0x080060a4
 80008c0:	080060a8 	.word	0x080060a8
 80008c4:	080060b4 	.word	0x080060b4
 80008c8:	20000155 	.word	0x20000155
 80008cc:	080060d0 	.word	0x080060d0
 80008d0:	080060e0 	.word	0x080060e0
 80008d4:	08006100 	.word	0x08006100
 80008d8:	08006110 	.word	0x08006110
 80008dc:	0800611c 	.word	0x0800611c
 80008e0:	08006128 	.word	0x08006128
 80008e4:	08006134 	.word	0x08006134
 80008e8:	08006140 	.word	0x08006140
 80008ec:	08006168 	.word	0x08006168
 80008f0:	08006170 	.word	0x08006170
 80008f4:	08006188 	.word	0x08006188
 80008f8:	08006190 	.word	0x08006190

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 faf1 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f81b 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090a:	f000 f8f5 	bl	8000af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800090e:	f000 f875 	bl	80009fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000912:	f000 f89d 	bl	8000a50 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000916:	f000 f8c5 	bl	8000aa4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(showIP_task, "ShowIP", 1024, NULL, 0, NULL);
 800091a:	2300      	movs	r3, #0
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	2300      	movs	r3, #0
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2300      	movs	r3, #0
 8000924:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000928:	4903      	ldr	r1, [pc, #12]	@ (8000938 <main+0x3c>)
 800092a:	4804      	ldr	r0, [pc, #16]	@ (800093c <main+0x40>)
 800092c:	f003 f8c4 	bl	8003ab8 <xTaskCreate>
  vTaskStartScheduler();
 8000930:	f003 fa38 	bl	8003da4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <main+0x38>
 8000938:	080061ac 	.word	0x080061ac
 800093c:	080006e5 	.word	0x080006e5

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	@ 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f004 fece 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <SystemClock_Config+0xb4>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	4a21      	ldr	r2, [pc, #132]	@ (80009f4 <SystemClock_Config+0xb4>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	@ 0x40
 8000974:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <SystemClock_Config+0xb4>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <SystemClock_Config+0xb8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a1b      	ldr	r2, [pc, #108]	@ (80009f8 <SystemClock_Config+0xb8>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <SystemClock_Config+0xb8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fe51 	bl	8001658 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009bc:	f000 f8ec 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f8b4 	bl	8001b48 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009e6:	f000 f8d7 	bl	8000b98 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	@ 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <MX_USART2_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f001 fa68 	bl	8001f08 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f8ab 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000007c 	.word	0x2000007c
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <MX_USART3_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 11520;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a5c:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_USART3_UART_Init+0x4c>)
 8000a88:	f001 fa3e 	bl	8001f08 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 f881 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000c4 	.word	0x200000c4
 8000aa0:	40004800 	.word	0x40004800

08000aa4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_USART6_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000adc:	f001 fa14 	bl	8001f08 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f857 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000010c 	.word	0x2000010c
 8000af4:	40011400 	.word	0x40011400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_GPIO_Init+0x98>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WIFI_RST_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2130      	movs	r1, #48	@ 0x30
 8000b66:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <MX_GPIO_Init+0x9c>)
 8000b68:	f000 fd5c 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_RST_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|WIFI_EN_Pin;
 8000b6c:	2330      	movs	r3, #48	@ 0x30
 8000b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4619      	mov	r1, r3
 8000b82:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_GPIO_Init+0x9c>)
 8000b84:	f000 fbb2 	bl	80012ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <myprintf>:
#include "myprintf.h"

extern UART_HandleTypeDef huart2;

void myprintf(UART_HandleTypeDef *huart, const char *fmt, ...)
{
 8000ba4:	b40e      	push	{r1, r2, r3}
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	60bb      	str	r3, [r7, #8]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bbc:	480b      	ldr	r0, [pc, #44]	@ (8000bec <myprintf+0x48>)
 8000bbe:	f004 fd89 	bl	80056d4 <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 8000bc2:	480a      	ldr	r0, [pc, #40]	@ (8000bec <myprintf+0x48>)
 8000bc4:	f7ff fb04 	bl	80001d0 <strlen>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(huart, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	4905      	ldr	r1, [pc, #20]	@ (8000bec <myprintf+0x48>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f001 f9e6 	bl	8001fa8 <HAL_UART_Transmit>
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000be6:	b003      	add	sp, #12
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200001e0 	.word	0x200001e0

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8000d9c <HAL_UART_MspInit+0x15c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12c      	bne.n	8000cbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
 8000c66:	4b4e      	ldr	r3, [pc, #312]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b4b      	ldr	r3, [pc, #300]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7a:	623b      	str	r3, [r7, #32]
 8000c7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	4b47      	ldr	r3, [pc, #284]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a46      	ldr	r2, [pc, #280]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b44      	ldr	r3, [pc, #272]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TTL_TX_Pin|TTL_RX_Pin;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000caa:	2307      	movs	r3, #7
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	483b      	ldr	r0, [pc, #236]	@ (8000da4 <HAL_UART_MspInit+0x164>)
 8000cb6:	f000 fb19 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cba:	e06b      	b.n	8000d94 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a39      	ldr	r2, [pc, #228]	@ (8000da8 <HAL_UART_MspInit+0x168>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12d      	bne.n	8000d22 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	4b35      	ldr	r3, [pc, #212]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a34      	ldr	r2, [pc, #208]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a2d      	ldr	r2, [pc, #180]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 8000cfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d10:	2307      	movs	r3, #7
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4824      	ldr	r0, [pc, #144]	@ (8000dac <HAL_UART_MspInit+0x16c>)
 8000d1c:	f000 fae6 	bl	80012ec <HAL_GPIO_Init>
}
 8000d20:	e038      	b.n	8000d94 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a22      	ldr	r2, [pc, #136]	@ (8000db0 <HAL_UART_MspInit+0x170>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d133      	bne.n	8000d94 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d34:	4a1a      	ldr	r2, [pc, #104]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	4a13      	ldr	r2, [pc, #76]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_UART_MspInit+0x160>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d64:	23c0      	movs	r3, #192	@ 0xc0
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d74:	2308      	movs	r3, #8
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <HAL_UART_MspInit+0x174>)
 8000d80:	f000 fab4 	bl	80012ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2047      	movs	r0, #71	@ 0x47
 8000d8a:	f000 f9e6 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000d8e:	2047      	movs	r0, #71	@ 0x47
 8000d90:	f000 f9ff 	bl	8001192 <HAL_NVIC_EnableIRQ>
}
 8000d94:	bf00      	nop
 8000d96:	3738      	adds	r7, #56	@ 0x38
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000
 8000da8:	40004800 	.word	0x40004800
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40011400 	.word	0x40011400
 8000db4:	40020800 	.word	0x40020800

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <DebugMon_Handler>:
}
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <USART6_IRQHandler+0x10>)
 8000df6:	f001 f987 	bl	8002108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000010c 	.word	0x2000010c

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d207      	bcs.n	8000e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e34:	f004 fc88 	bl	8005748 <__errno>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <_sbrk+0x64>)
 8000e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20020000 	.word	0x20020000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	200002e0 	.word	0x200002e0
 8000e6c:	200131d0 	.word	0x200131d0

08000e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ecc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e98:	f7ff ffea 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e9c:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9e:	490d      	ldr	r1, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f004 fc47 	bl	8005754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fd19 	bl	80008fc <main>
  bx  lr    
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ed8:	08006228 	.word	0x08006228
  ldr r2, =_sbss
 8000edc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ee0:	200131d0 	.word	0x200131d0

08000ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f917 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	200f      	movs	r0, #15
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fe68 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f92f 	bl	80011ae <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f8f7 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200002e4 	.word	0x200002e4

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	@ (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	@ (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	@ (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	@ 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff3e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff31 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffa2 	bl	8001100 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff feda 	bl	8000f8c <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d008      	beq.n	80011f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2280      	movs	r2, #128	@ 0x80
 80011ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e052      	b.n	800129e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0216 	bic.w	r2, r2, #22
 8001206:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001216:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <HAL_DMA_Abort+0x62>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0208 	bic.w	r2, r2, #8
 8001236:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001248:	e013      	b.n	8001272 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800124a:	f7ff fe9f 	bl	8000f8c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b05      	cmp	r3, #5
 8001256:	d90c      	bls.n	8001272 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2220      	movs	r2, #32
 800125c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2203      	movs	r2, #3
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e015      	b.n	800129e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e4      	bne.n	800124a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001284:	223f      	movs	r2, #63	@ 0x3f
 8001286:	409a      	lsls	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d004      	beq.n	80012c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2280      	movs	r2, #128	@ 0x80
 80012be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e00c      	b.n	80012de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2205      	movs	r2, #5
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e16b      	b.n	80015e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 815a 	bne.w	80015da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d005      	beq.n	800133e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	2b02      	cmp	r3, #2
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d017      	beq.n	80013dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80b4 	beq.w	80015da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b60      	ldr	r3, [pc, #384]	@ (80015f8 <HAL_GPIO_Init+0x30c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a5f      	ldr	r2, [pc, #380]	@ (80015f8 <HAL_GPIO_Init+0x30c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b5d      	ldr	r3, [pc, #372]	@ (80015f8 <HAL_GPIO_Init+0x30c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a5b      	ldr	r2, [pc, #364]	@ (80015fc <HAL_GPIO_Init+0x310>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a52      	ldr	r2, [pc, #328]	@ (8001600 <HAL_GPIO_Init+0x314>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d02b      	beq.n	8001512 <HAL_GPIO_Init+0x226>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a51      	ldr	r2, [pc, #324]	@ (8001604 <HAL_GPIO_Init+0x318>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d025      	beq.n	800150e <HAL_GPIO_Init+0x222>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a50      	ldr	r2, [pc, #320]	@ (8001608 <HAL_GPIO_Init+0x31c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01f      	beq.n	800150a <HAL_GPIO_Init+0x21e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	@ (800160c <HAL_GPIO_Init+0x320>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d019      	beq.n	8001506 <HAL_GPIO_Init+0x21a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001610 <HAL_GPIO_Init+0x324>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0x216>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001614 <HAL_GPIO_Init+0x328>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00d      	beq.n	80014fe <HAL_GPIO_Init+0x212>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001618 <HAL_GPIO_Init+0x32c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x20e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4b      	ldr	r2, [pc, #300]	@ (800161c <HAL_GPIO_Init+0x330>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_GPIO_Init+0x20a>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00e      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014f6:	2308      	movs	r3, #8
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014fa:	2306      	movs	r3, #6
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x228>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x228>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x228>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x228>
 8001512:	2300      	movs	r3, #0
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001524:	4935      	ldr	r1, [pc, #212]	@ (80015fc <HAL_GPIO_Init+0x310>)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001532:	4b3b      	ldr	r3, [pc, #236]	@ (8001620 <HAL_GPIO_Init+0x334>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001556:	4a32      	ldr	r2, [pc, #200]	@ (8001620 <HAL_GPIO_Init+0x334>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800155c:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <HAL_GPIO_Init+0x334>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001580:	4a27      	ldr	r2, [pc, #156]	@ (8001620 <HAL_GPIO_Init+0x334>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <HAL_GPIO_Init+0x334>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_GPIO_Init+0x334>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <HAL_GPIO_Init+0x334>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d4:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <HAL_GPIO_Init+0x334>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	f67f ae90 	bls.w	8001308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40013800 	.word	0x40013800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40021000 	.word	0x40021000
 8001614:	40021400 	.word	0x40021400
 8001618:	40021800 	.word	0x40021800
 800161c:	40021c00 	.word	0x40021c00
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e267      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d075      	beq.n	8001762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001676:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b04      	cmp	r3, #4
 8001680:	d00c      	beq.n	800169c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b85      	ldr	r3, [pc, #532]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800168a:	2b08      	cmp	r3, #8
 800168c:	d112      	bne.n	80016b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168e:	4b82      	ldr	r3, [pc, #520]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800169a:	d10b      	bne.n	80016b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	4b7e      	ldr	r3, [pc, #504]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d05b      	beq.n	8001760 <HAL_RCC_OscConfig+0x108>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d157      	bne.n	8001760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e242      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_OscConfig+0x74>
 80016be:	4b76      	ldr	r3, [pc, #472]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a75      	ldr	r2, [pc, #468]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xb0>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x98>
 80016d6:	4b70      	ldr	r3, [pc, #448]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6f      	ldr	r2, [pc, #444]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0xb0>
 80016f0:	4b69      	ldr	r3, [pc, #420]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a68      	ldr	r2, [pc, #416]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b66      	ldr	r3, [pc, #408]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a65      	ldr	r2, [pc, #404]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fc3c 	bl	8000f8c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fc38 	bl	8000f8c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	@ 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e207      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b5b      	ldr	r3, [pc, #364]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0xc0>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fc28 	bl	8000f8c <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fc24 	bl	8000f8c <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	@ 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1f3      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	4b51      	ldr	r3, [pc, #324]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0xe8>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d063      	beq.n	8001836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800176e:	4b4a      	ldr	r3, [pc, #296]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001782:	2b08      	cmp	r3, #8
 8001784:	d11c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001786:	4b44      	ldr	r3, [pc, #272]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d116      	bne.n	80017c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x152>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e1c7      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4937      	ldr	r1, [pc, #220]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	e03a      	b.n	8001836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c8:	4b34      	ldr	r3, [pc, #208]	@ (800189c <HAL_RCC_OscConfig+0x244>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fbdd 	bl	8000f8c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fbd9 	bl	8000f8c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1a8      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4925      	ldr	r1, [pc, #148]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180a:	4b24      	ldr	r3, [pc, #144]	@ (800189c <HAL_RCC_OscConfig+0x244>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fbbc 	bl	8000f8c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fbb8 	bl	8000f8c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e187      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d036      	beq.n	80018b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d016      	beq.n	8001878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_RCC_OscConfig+0x248>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fb9c 	bl	8000f8c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7ff fb98 	bl	8000f8c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e167      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_RCC_OscConfig+0x240>)
 800186c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x200>
 8001876:	e01b      	b.n	80018b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_RCC_OscConfig+0x248>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fb85 	bl	8000f8c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001884:	e00e      	b.n	80018a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff fb81 	bl	8000f8c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d907      	bls.n	80018a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e150      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
 8001898:	40023800 	.word	0x40023800
 800189c:	42470000 	.word	0x42470000
 80018a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	4b88      	ldr	r3, [pc, #544]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80018a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ea      	bne.n	8001886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8097 	beq.w	80019ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c2:	4b81      	ldr	r3, [pc, #516]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10f      	bne.n	80018ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ee:	4b77      	ldr	r3, [pc, #476]	@ (8001acc <HAL_RCC_OscConfig+0x474>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d118      	bne.n	800192c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fa:	4b74      	ldr	r3, [pc, #464]	@ (8001acc <HAL_RCC_OscConfig+0x474>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a73      	ldr	r2, [pc, #460]	@ (8001acc <HAL_RCC_OscConfig+0x474>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001906:	f7ff fb41 	bl	8000f8c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7ff fb3d 	bl	8000f8c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e10c      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b6a      	ldr	r3, [pc, #424]	@ (8001acc <HAL_RCC_OscConfig+0x474>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x2ea>
 8001934:	4b64      	ldr	r3, [pc, #400]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001938:	4a63      	ldr	r2, [pc, #396]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001940:	e01c      	b.n	800197c <HAL_RCC_OscConfig+0x324>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b05      	cmp	r3, #5
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x30c>
 800194a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6713      	str	r3, [r2, #112]	@ 0x70
 8001956:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6713      	str	r3, [r2, #112]	@ 0x70
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0x324>
 8001964:	4b58      	ldr	r3, [pc, #352]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001968:	4a57      	ldr	r2, [pc, #348]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001970:	4b55      	ldr	r3, [pc, #340]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001974:	4a54      	ldr	r2, [pc, #336]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001976:	f023 0304 	bic.w	r3, r3, #4
 800197a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d015      	beq.n	80019b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff fb02 	bl	8000f8c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff fafe 	bl	8000f8c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0cb      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a2:	4b49      	ldr	r3, [pc, #292]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0ee      	beq.n	800198c <HAL_RCC_OscConfig+0x334>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff faec 	bl	8000f8c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff fae8 	bl	8000f8c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0b5      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ce:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ee      	bne.n	80019b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b39      	ldr	r3, [pc, #228]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	4a38      	ldr	r2, [pc, #224]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80a1 	beq.w	8001b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f6:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d05c      	beq.n	8001abc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d141      	bne.n	8001a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fabc 	bl	8000f8c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fab8 	bl	8000f8c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e087      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	019b      	lsls	r3, r3, #6
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	491b      	ldr	r1, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fa91 	bl	8000f8c <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff fa8d 	bl	8000f8c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e05c      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x416>
 8001a8c:	e054      	b.n	8001b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <HAL_RCC_OscConfig+0x478>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fa7a 	bl	8000f8c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff fa76 	bl	8000f8c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e045      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x444>
 8001aba:	e03d      	b.n	8001b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e038      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <HAL_RCC_OscConfig+0x4ec>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d028      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d121      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d11a      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d111      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0cc      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b68      	ldr	r3, [pc, #416]	@ (8001d00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d90c      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b65      	ldr	r3, [pc, #404]	@ (8001d00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b63      	ldr	r3, [pc, #396]	@ (8001d00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b8      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9c:	4b59      	ldr	r3, [pc, #356]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb4:	4b53      	ldr	r3, [pc, #332]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a52      	ldr	r2, [pc, #328]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b50      	ldr	r3, [pc, #320]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	494d      	ldr	r1, [pc, #308]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d044      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d119      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d003      	beq.n	8001c06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c06:	4b3f      	ldr	r3, [pc, #252]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e06f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e067      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4934      	ldr	r1, [pc, #208]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c38:	f7ff f9a8 	bl	8000f8c <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff f9a4 	bl	8000f8c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e04f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c68:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d20c      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e032      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4916      	ldr	r1, [pc, #88]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cba:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	490e      	ldr	r1, [pc, #56]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cce:	f000 f821 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	490a      	ldr	r1, [pc, #40]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	5ccb      	ldrb	r3, [r1, r3]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	4a09      	ldr	r2, [pc, #36]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cea:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f91c 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00
 8001d04:	40023800 	.word	0x40023800
 8001d08:	080061cc 	.word	0x080061cc
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d18:	b090      	sub	sp, #64	@ 0x40
 8001d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d2c:	4b59      	ldr	r3, [pc, #356]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d00d      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x40>
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	f200 80a1 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x34>
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d46:	e09b      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b53      	ldr	r3, [pc, #332]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d4c:	e09b      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4e:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d52:	e098      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d54:	4b4f      	ldr	r3, [pc, #316]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d028      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	2200      	movs	r2, #0
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4b47      	ldr	r3, [pc, #284]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d80:	fb03 f201 	mul.w	r2, r3, r1
 8001d84:	2300      	movs	r3, #0
 8001d86:	fb00 f303 	mul.w	r3, r0, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a43      	ldr	r2, [pc, #268]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d8e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d94:	460a      	mov	r2, r1
 8001d96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d9a:	4413      	add	r3, r2
 8001d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da0:	2200      	movs	r2, #0
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	61fa      	str	r2, [r7, #28]
 8001da6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001daa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dae:	f7fe fa67 	bl	8000280 <__aeabi_uldivmod>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4613      	mov	r3, r2
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dba:	e053      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbc:	4b35      	ldr	r3, [pc, #212]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	617a      	str	r2, [r7, #20]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dce:	f04f 0b00 	mov.w	fp, #0
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	465b      	mov	r3, fp
 8001dd6:	f04f 0000 	mov.w	r0, #0
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	0159      	lsls	r1, r3, #5
 8001de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de4:	0150      	lsls	r0, r2, #5
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	ebb2 080a 	subs.w	r8, r2, sl
 8001dee:	eb63 090b 	sbc.w	r9, r3, fp
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e06:	ebb2 0408 	subs.w	r4, r2, r8
 8001e0a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	00eb      	lsls	r3, r5, #3
 8001e18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1c:	00e2      	lsls	r2, r4, #3
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	eb14 030a 	adds.w	r3, r4, sl
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	eb45 030b 	adc.w	r3, r5, fp
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	028b      	lsls	r3, r1, #10
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e44:	4621      	mov	r1, r4
 8001e46:	028a      	lsls	r2, r1, #10
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	60fa      	str	r2, [r7, #12]
 8001e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e58:	f7fe fa12 	bl	8000280 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3740      	adds	r7, #64	@ 0x40
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	017d7840 	.word	0x017d7840

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	@ (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	080061dc 	.word	0x080061dc

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee4:	f7ff ffdc 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0b5b      	lsrs	r3, r3, #13
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	@ (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	080061dc 	.word	0x080061dc

08001f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e042      	b.n	8001fa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fe86 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	@ 0x24
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fdd3 	bl	8002af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d175      	bne.n	80020b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_UART_Transmit+0x2c>
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e06e      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2221      	movs	r2, #33	@ 0x21
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fe6:	f7fe ffd1 	bl	8000f8c <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002000:	d108      	bne.n	8002014 <HAL_UART_Transmit+0x6c>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e003      	b.n	800201c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800201c:	e02e      	b.n	800207c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	2180      	movs	r1, #128	@ 0x80
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fb37 	bl	800269c <UART_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e03a      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3302      	adds	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e007      	b.n	800206e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1cb      	bne.n	800201e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	@ 0x40
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fb03 	bl	800269c <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e006      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020b4:	2302      	movs	r3, #2
  }
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	4613      	mov	r3, r2
 80020ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d112      	bne.n	80020fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_UART_Receive_IT+0x26>
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e00b      	b.n	8002100 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	461a      	mov	r2, r3
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fb2a 	bl	800274e <UART_Start_Receive_IT>
 80020fa:	4603      	mov	r3, r0
 80020fc:	e000      	b.n	8002100 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0ba      	sub	sp, #232	@ 0xe8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800214e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_UART_IRQHandler+0x66>
 800215a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fc07 	bl	800297a <UART_Receive_IT>
      return;
 800216c:	e273      	b.n	8002656 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800216e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80de 	beq.w	8002334 <HAL_UART_IRQHandler+0x22c>
 8002178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002188:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80d1 	beq.w	8002334 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_UART_IRQHandler+0xae>
 800219e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_UART_IRQHandler+0xd2>
 80021c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f043 0202 	orr.w	r2, r3, #2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_UART_IRQHandler+0xf6>
 80021e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f043 0204 	orr.w	r2, r3, #4
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d011      	beq.n	800222e <HAL_UART_IRQHandler+0x126>
 800220a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f043 0208 	orr.w	r2, r3, #8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 820a 	beq.w	800264c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_UART_IRQHandler+0x14e>
 8002244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fb92 	bl	800297a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002260:	2b40      	cmp	r3, #64	@ 0x40
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d103      	bne.n	8002282 <HAL_UART_IRQHandler+0x17a>
 800227a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d04f      	beq.n	8002322 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa9d 	bl	80027c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002292:	2b40      	cmp	r3, #64	@ 0x40
 8002294:	d141      	bne.n	800231a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3314      	adds	r3, #20
 800229c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022a4:	e853 3f00 	ldrex	r3, [r3]
 80022a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3314      	adds	r3, #20
 80022be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80022c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80022c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80022d2:	e841 2300 	strex	r3, r2, [r1]
 80022d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80022da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1d9      	bne.n	8002296 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d013      	beq.n	8002312 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ee:	4a8a      	ldr	r2, [pc, #552]	@ (8002518 <HAL_UART_IRQHandler+0x410>)
 80022f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe ffd5 	bl	80012a6 <HAL_DMA_Abort_IT>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800230c:	4610      	mov	r0, r2
 800230e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002310:	e00e      	b.n	8002330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9ac 	bl	8002670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	e00a      	b.n	8002330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f9a8 	bl	8002670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002320:	e006      	b.n	8002330 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9a4 	bl	8002670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800232e:	e18d      	b.n	800264c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002330:	bf00      	nop
    return;
 8002332:	e18b      	b.n	800264c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 8167 	bne.w	800260c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800233e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8160 	beq.w	800260c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800234c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8159 	beq.w	800260c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	f040 80ce 	bne.w	800251c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800238c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a9 	beq.w	80024e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800239a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800239e:	429a      	cmp	r2, r3
 80023a0:	f080 80a2 	bcs.w	80024e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023b6:	f000 8088 	beq.w	80024ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	330c      	adds	r3, #12
 80023c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023c8:	e853 3f00 	ldrex	r3, [r3]
 80023cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80023d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80023e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80023f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80023fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1d9      	bne.n	80023ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3314      	adds	r3, #20
 800240c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002410:	e853 3f00 	ldrex	r3, [r3]
 8002414:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3314      	adds	r3, #20
 8002426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800242a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800242e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002432:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800243c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e1      	bne.n	8002406 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3314      	adds	r3, #20
 8002448:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800244c:	e853 3f00 	ldrex	r3, [r3]
 8002450:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3314      	adds	r3, #20
 8002462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002466:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002468:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800246c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800246e:	e841 2300 	strex	r3, r2, [r1]
 8002472:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e3      	bne.n	8002442 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330c      	adds	r3, #12
 800248e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002492:	e853 3f00 	ldrex	r3, [r3]
 8002496:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800249a:	f023 0310 	bic.w	r3, r3, #16
 800249e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	330c      	adds	r3, #12
 80024a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024b4:	e841 2300 	strex	r3, r2, [r1]
 80024b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e3      	bne.n	8002488 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fe7e 	bl	80011c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024d8:	b29b      	uxth	r3, r3
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	b29b      	uxth	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8cf 	bl	8002684 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80024e6:	e0b3      	b.n	8002650 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024f0:	429a      	cmp	r2, r3
 80024f2:	f040 80ad 	bne.w	8002650 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002500:	f040 80a6 	bne.w	8002650 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f8b7 	bl	8002684 <HAL_UARTEx_RxEventCallback>
      return;
 8002516:	e09b      	b.n	8002650 <HAL_UART_IRQHandler+0x548>
 8002518:	08002889 	.word	0x08002889
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002524:	b29b      	uxth	r3, r3
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 808e 	beq.w	8002654 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8089 	beq.w	8002654 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	330c      	adds	r3, #12
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002558:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002566:	647a      	str	r2, [r7, #68]	@ 0x44
 8002568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800256c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800256e:	e841 2300 	strex	r3, r2, [r1]
 8002572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e3      	bne.n	8002542 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3314      	adds	r3, #20
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	e853 3f00 	ldrex	r3, [r3]
 8002588:	623b      	str	r3, [r7, #32]
   return(result);
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800259e:	633a      	str	r2, [r7, #48]	@ 0x30
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a6:	e841 2300 	strex	r3, r2, [r1]
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e3      	bne.n	800257a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	e853 3f00 	ldrex	r3, [r3]
 80025ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0310 	bic.w	r3, r3, #16
 80025d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80025e4:	61fa      	str	r2, [r7, #28]
 80025e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	e841 2300 	strex	r3, r2, [r1]
 80025f0:	617b      	str	r3, [r7, #20]
   return(result);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e3      	bne.n	80025c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f83d 	bl	8002684 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800260a:	e023      	b.n	8002654 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800260c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_UART_IRQHandler+0x524>
 8002618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800261c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f940 	bl	80028aa <UART_Transmit_IT>
    return;
 800262a:	e014      	b.n	8002656 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800262c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00e      	beq.n	8002656 <HAL_UART_IRQHandler+0x54e>
 8002638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f980 	bl	800294a <UART_EndTransmit_IT>
    return;
 800264a:	e004      	b.n	8002656 <HAL_UART_IRQHandler+0x54e>
    return;
 800264c:	bf00      	nop
 800264e:	e002      	b.n	8002656 <HAL_UART_IRQHandler+0x54e>
      return;
 8002650:	bf00      	nop
 8002652:	e000      	b.n	8002656 <HAL_UART_IRQHandler+0x54e>
      return;
 8002654:	bf00      	nop
  }
}
 8002656:	37e8      	adds	r7, #232	@ 0xe8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ac:	e03b      	b.n	8002726 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d037      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7fe fc69 	bl	8000f8c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <UART_WaitOnFlagUntilTimeout+0x30>
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e03a      	b.n	8002746 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d023      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b80      	cmp	r3, #128	@ 0x80
 80026e2:	d020      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0x8a>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b40      	cmp	r3, #64	@ 0x40
 80026e8:	d01d      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d116      	bne.n	8002726 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f857 	bl	80027c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2208      	movs	r2, #8
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	429a      	cmp	r2, r3
 8002742:	d0b4      	beq.n	80026ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	4613      	mov	r3, r2
 800275a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2222      	movs	r2, #34	@ 0x22
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002792:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0220 	orr.w	r2, r2, #32
 80027b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b095      	sub	sp, #84	@ 0x54
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	330c      	adds	r3, #12
 80027e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80027ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e5      	bne.n	80027ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3314      	adds	r3, #20
 8002804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	61fb      	str	r3, [r7, #28]
   return(result);
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800281e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e5      	bne.n	80027fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	2b01      	cmp	r3, #1
 8002838:	d119      	bne.n	800286e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	60bb      	str	r3, [r7, #8]
   return(result);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f023 0310 	bic.w	r3, r3, #16
 8002850:	647b      	str	r3, [r7, #68]	@ 0x44
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800285a:	61ba      	str	r2, [r7, #24]
 800285c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	613b      	str	r3, [r7, #16]
   return(result);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e5      	bne.n	800283a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800287c:	bf00      	nop
 800287e:	3754      	adds	r7, #84	@ 0x54
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff fee7 	bl	8002670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b21      	cmp	r3, #33	@ 0x21
 80028bc:	d13e      	bne.n	800293c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028c6:	d114      	bne.n	80028f2 <UART_Transmit_IT+0x48>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d110      	bne.n	80028f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	e008      	b.n	8002904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6211      	str	r1, [r2, #32]
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10f      	bne.n	8002938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fe76 	bl	800265c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08c      	sub	sp, #48	@ 0x30
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b22      	cmp	r3, #34	@ 0x22
 8002994:	f040 80aa 	bne.w	8002aec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a0:	d115      	bne.n	80029ce <UART_Receive_IT+0x54>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d111      	bne.n	80029ce <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029bc:	b29a      	uxth	r2, r3
 80029be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80029cc:	e024      	b.n	8002a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029dc:	d007      	beq.n	80029ee <UART_Receive_IT+0x74>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <UART_Receive_IT+0x82>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e008      	b.n	8002a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d15d      	bne.n	8002ae8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0220 	bic.w	r2, r2, #32
 8002a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d135      	bne.n	8002ade <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	e853 3f00 	ldrex	r3, [r3]
 8002a86:	613b      	str	r3, [r7, #16]
   return(result);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f023 0310 	bic.w	r3, r3, #16
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	623a      	str	r2, [r7, #32]
 8002a9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	69f9      	ldr	r1, [r7, #28]
 8002a9e:	6a3a      	ldr	r2, [r7, #32]
 8002aa0:	e841 2300 	strex	r3, r2, [r1]
 8002aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e5      	bne.n	8002a78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d10a      	bne.n	8002ad0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fdd4 	bl	8002684 <HAL_UARTEx_RxEventCallback>
 8002adc:	e002      	b.n	8002ae4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fd fdaa 	bl	8000638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e002      	b.n	8002aee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e000      	b.n	8002aee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3730      	adds	r7, #48	@ 0x30
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b0c0      	sub	sp, #256	@ 0x100
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	68d9      	ldr	r1, [r3, #12]
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	ea40 0301 	orr.w	r3, r0, r1
 8002b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b50:	f021 010c 	bic.w	r1, r1, #12
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b72:	6999      	ldr	r1, [r3, #24]
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	ea40 0301 	orr.w	r3, r0, r1
 8002b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc4 <UART_SetConfig+0x2cc>)
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d005      	beq.n	8002b98 <UART_SetConfig+0xa0>
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc8 <UART_SetConfig+0x2d0>)
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d104      	bne.n	8002ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b98:	f7ff f9a2 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 8002b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ba0:	e003      	b.n	8002baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ba2:	f7ff f989 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8002ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb4:	f040 810c 	bne.w	8002dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bca:	4622      	mov	r2, r4
 8002bcc:	462b      	mov	r3, r5
 8002bce:	1891      	adds	r1, r2, r2
 8002bd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bd2:	415b      	adcs	r3, r3
 8002bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bda:	4621      	mov	r1, r4
 8002bdc:	eb12 0801 	adds.w	r8, r2, r1
 8002be0:	4629      	mov	r1, r5
 8002be2:	eb43 0901 	adc.w	r9, r3, r1
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	4699      	mov	r9, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	eb18 0303 	adds.w	r3, r8, r3
 8002c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c08:	462b      	mov	r3, r5
 8002c0a:	eb49 0303 	adc.w	r3, r9, r3
 8002c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c26:	460b      	mov	r3, r1
 8002c28:	18db      	adds	r3, r3, r3
 8002c2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	eb42 0303 	adc.w	r3, r2, r3
 8002c32:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c3c:	f7fd fb20 	bl	8000280 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4b61      	ldr	r3, [pc, #388]	@ (8002dcc <UART_SetConfig+0x2d4>)
 8002c46:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	011c      	lsls	r4, r3, #4
 8002c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c60:	4642      	mov	r2, r8
 8002c62:	464b      	mov	r3, r9
 8002c64:	1891      	adds	r1, r2, r2
 8002c66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c68:	415b      	adcs	r3, r3
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c70:	4641      	mov	r1, r8
 8002c72:	eb12 0a01 	adds.w	sl, r2, r1
 8002c76:	4649      	mov	r1, r9
 8002c78:	eb43 0b01 	adc.w	fp, r3, r1
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c90:	4692      	mov	sl, r2
 8002c92:	469b      	mov	fp, r3
 8002c94:	4643      	mov	r3, r8
 8002c96:	eb1a 0303 	adds.w	r3, sl, r3
 8002c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	18db      	adds	r3, r3, r3
 8002cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	eb42 0303 	adc.w	r3, r2, r3
 8002cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cd2:	f7fd fad5 	bl	8000280 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <UART_SetConfig+0x2d4>)
 8002cde:	fba3 2301 	umull	r2, r3, r3, r1
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2264      	movs	r2, #100	@ 0x64
 8002ce6:	fb02 f303 	mul.w	r3, r2, r3
 8002cea:	1acb      	subs	r3, r1, r3
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cf2:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <UART_SetConfig+0x2d4>)
 8002cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d00:	441c      	add	r4, r3
 8002d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d06:	2200      	movs	r2, #0
 8002d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d24:	4641      	mov	r1, r8
 8002d26:	1851      	adds	r1, r2, r1
 8002d28:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	00cb      	lsls	r3, r1, #3
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d46:	4651      	mov	r1, sl
 8002d48:	00ca      	lsls	r2, r1, #3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4642      	mov	r2, r8
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d58:	464b      	mov	r3, r9
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d78:	460b      	mov	r3, r1
 8002d7a:	18db      	adds	r3, r3, r3
 8002d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d7e:	4613      	mov	r3, r2
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d8e:	f7fd fa77 	bl	8000280 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <UART_SetConfig+0x2d4>)
 8002d98:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	2164      	movs	r1, #100	@ 0x64
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3332      	adds	r3, #50	@ 0x32
 8002daa:	4a08      	ldr	r2, [pc, #32]	@ (8002dcc <UART_SetConfig+0x2d4>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	f003 0207 	and.w	r2, r3, #7
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4422      	add	r2, r4
 8002dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dc0:	e106      	b.n	8002fd0 <UART_SetConfig+0x4d8>
 8002dc2:	bf00      	nop
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002dda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002de2:	4642      	mov	r2, r8
 8002de4:	464b      	mov	r3, r9
 8002de6:	1891      	adds	r1, r2, r2
 8002de8:	6239      	str	r1, [r7, #32]
 8002dea:	415b      	adcs	r3, r3
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002df2:	4641      	mov	r1, r8
 8002df4:	1854      	adds	r4, r2, r1
 8002df6:	4649      	mov	r1, r9
 8002df8:	eb43 0501 	adc.w	r5, r3, r1
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	00eb      	lsls	r3, r5, #3
 8002e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e0a:	00e2      	lsls	r2, r4, #3
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	461d      	mov	r5, r3
 8002e10:	4643      	mov	r3, r8
 8002e12:	18e3      	adds	r3, r4, r3
 8002e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e18:	464b      	mov	r3, r9
 8002e1a:	eb45 0303 	adc.w	r3, r5, r3
 8002e1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e3e:	4629      	mov	r1, r5
 8002e40:	008b      	lsls	r3, r1, #2
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e48:	4621      	mov	r1, r4
 8002e4a:	008a      	lsls	r2, r1, #2
 8002e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e50:	f7fd fa16 	bl	8000280 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4b60      	ldr	r3, [pc, #384]	@ (8002fdc <UART_SetConfig+0x4e4>)
 8002e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	011c      	lsls	r4, r3, #4
 8002e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e74:	4642      	mov	r2, r8
 8002e76:	464b      	mov	r3, r9
 8002e78:	1891      	adds	r1, r2, r2
 8002e7a:	61b9      	str	r1, [r7, #24]
 8002e7c:	415b      	adcs	r3, r3
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e84:	4641      	mov	r1, r8
 8002e86:	1851      	adds	r1, r2, r1
 8002e88:	6139      	str	r1, [r7, #16]
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	414b      	adcs	r3, r1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e9c:	4659      	mov	r1, fp
 8002e9e:	00cb      	lsls	r3, r1, #3
 8002ea0:	4651      	mov	r1, sl
 8002ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea6:	4651      	mov	r1, sl
 8002ea8:	00ca      	lsls	r2, r1, #3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eb8:	464b      	mov	r3, r9
 8002eba:	460a      	mov	r2, r1
 8002ebc:	eb42 0303 	adc.w	r3, r2, r3
 8002ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ece:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002edc:	4649      	mov	r1, r9
 8002ede:	008b      	lsls	r3, r1, #2
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	008a      	lsls	r2, r1, #2
 8002eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002eee:	f7fd f9c7 	bl	8000280 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <UART_SetConfig+0x4e4>)
 8002efa:	fba3 2301 	umull	r2, r3, r3, r1
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2264      	movs	r2, #100	@ 0x64
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	1acb      	subs	r3, r1, r3
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	3332      	adds	r3, #50	@ 0x32
 8002f0c:	4a33      	ldr	r2, [pc, #204]	@ (8002fdc <UART_SetConfig+0x4e4>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f18:	441c      	add	r4, r3
 8002f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f1e:	2200      	movs	r2, #0
 8002f20:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f22:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	1891      	adds	r1, r2, r2
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	415b      	adcs	r3, r3
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f38:	4641      	mov	r1, r8
 8002f3a:	1851      	adds	r1, r2, r1
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	4649      	mov	r1, r9
 8002f40:	414b      	adcs	r3, r1
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f50:	4659      	mov	r1, fp
 8002f52:	00cb      	lsls	r3, r1, #3
 8002f54:	4651      	mov	r1, sl
 8002f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	00ca      	lsls	r2, r1, #3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	4642      	mov	r2, r8
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	460a      	mov	r2, r1
 8002f6e:	eb42 0303 	adc.w	r3, r2, r3
 8002f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	008b      	lsls	r3, r1, #2
 8002f90:	4641      	mov	r1, r8
 8002f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f96:	4641      	mov	r1, r8
 8002f98:	008a      	lsls	r2, r1, #2
 8002f9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f9e:	f7fd f96f 	bl	8000280 <__aeabi_uldivmod>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <UART_SetConfig+0x4e4>)
 8002fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	2164      	movs	r1, #100	@ 0x64
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	3332      	adds	r3, #50	@ 0x32
 8002fba:	4a08      	ldr	r2, [pc, #32]	@ (8002fdc <UART_SetConfig+0x4e4>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4422      	add	r2, r4
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fdc:	51eb851f 	.word	0x51eb851f

08002fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f103 0208 	add.w	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f103 0208 	add.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d103      	bne.n	80030a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e00c      	b.n	80030bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3308      	adds	r3, #8
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e002      	b.n	80030b0 <vListInsert+0x2e>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d2f6      	bcs.n	80030aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6852      	ldr	r2, [r2, #4]
 8003114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d103      	bne.n	8003128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003174:	f001 ff80 	bl	8005078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a4:	3b01      	subs	r3, #1
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	441a      	add	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	22ff      	movs	r2, #255	@ 0xff
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	22ff      	movs	r2, #255	@ 0xff
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d114      	bne.n	80031f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01a      	beq.n	8003208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3310      	adds	r3, #16
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 f856 	bl	8004288 <xTaskRemoveFromEventList>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d012      	beq.n	8003208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <xQueueGenericReset+0xd0>)
 80031e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	e009      	b.n	8003208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3310      	adds	r3, #16
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fef1 	bl	8002fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3324      	adds	r3, #36	@ 0x24
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff feec 	bl	8002fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003208:	f001 ff68 	bl	80050dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	@ 0x28
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	613b      	str	r3, [r7, #16]
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e004      	b.n	800325e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3350      	adds	r3, #80	@ 0x50
 8003262:	4618      	mov	r0, r3
 8003264:	f002 f82a 	bl	80052bc <pvPortMalloc>
 8003268:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	3350      	adds	r3, #80	@ 0x50
 8003278:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800327a:	79fa      	ldrb	r2, [r7, #7]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f805 	bl	8003296 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800328c:	69bb      	ldr	r3, [r7, #24]
	}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e002      	b.n	80032b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032c4:	2101      	movs	r1, #1
 80032c6:	69b8      	ldr	r0, [r7, #24]
 80032c8:	f7ff ff3e 	bl	8003148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	@ 0x38
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032ea:	2300      	movs	r3, #0
 80032ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <xQueueGenericSend+0x34>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <xQueueGenericSend+0x42>
 8003316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <xQueueGenericSend+0x46>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <xQueueGenericSend+0x48>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <xQueueGenericSend+0x64>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800333a:	bf00      	nop
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d103      	bne.n	800334e <xQueueGenericSend+0x72>
 8003346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <xQueueGenericSend+0x76>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <xQueueGenericSend+0x78>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <xQueueGenericSend+0x94>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	623b      	str	r3, [r7, #32]
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003370:	f001 f92a 	bl	80045c8 <xTaskGetSchedulerState>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <xQueueGenericSend+0xa4>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <xQueueGenericSend+0xa8>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <xQueueGenericSend+0xaa>
 8003384:	2300      	movs	r3, #0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	61fb      	str	r3, [r7, #28]
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	e7fd      	b.n	800339e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033a2:	f001 fe69 	bl	8005078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <xQueueGenericSend+0xdc>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d129      	bne.n	800340c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033be:	f000 fa0d 	bl	80037dc <prvCopyDataToQueue>
 80033c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	3324      	adds	r3, #36	@ 0x24
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 ff59 	bl	8004288 <xTaskRemoveFromEventList>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d013      	beq.n	8003404 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033dc:	4b3f      	ldr	r3, [pc, #252]	@ (80034dc <xQueueGenericSend+0x200>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	e00a      	b.n	8003404 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033f4:	4b39      	ldr	r3, [pc, #228]	@ (80034dc <xQueueGenericSend+0x200>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003404:	f001 fe6a 	bl	80050dc <vPortExitCritical>
				return pdPASS;
 8003408:	2301      	movs	r3, #1
 800340a:	e063      	b.n	80034d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003412:	f001 fe63 	bl	80050dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003416:	2300      	movs	r3, #0
 8003418:	e05c      	b.n	80034d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800341a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	4618      	mov	r0, r3
 8003426:	f000 ff93 	bl	8004350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800342a:	2301      	movs	r3, #1
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800342e:	f001 fe55 	bl	80050dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003432:	f000 fd05 	bl	8003e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003436:	f001 fe1f 	bl	8005078 <vPortEnterCritical>
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003440:	b25b      	sxtb	r3, r3
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d103      	bne.n	8003450 <xQueueGenericSend+0x174>
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003456:	b25b      	sxtb	r3, r3
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d103      	bne.n	8003466 <xQueueGenericSend+0x18a>
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003466:	f001 fe39 	bl	80050dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800346a:	1d3a      	adds	r2, r7, #4
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f000 ff82 	bl	800437c <xTaskCheckForTimeOut>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d124      	bne.n	80034c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800347e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003480:	f000 faa4 	bl	80039cc <prvIsQueueFull>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d018      	beq.n	80034bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800348a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348c:	3310      	adds	r3, #16
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fea6 	bl	80041e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800349a:	f000 fa2f 	bl	80038fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800349e:	f000 fcdd 	bl	8003e5c <xTaskResumeAll>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f47f af7c 	bne.w	80033a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80034aa:	4b0c      	ldr	r3, [pc, #48]	@ (80034dc <xQueueGenericSend+0x200>)
 80034ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	e772      	b.n	80033a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034be:	f000 fa1d 	bl	80038fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034c2:	f000 fccb 	bl	8003e5c <xTaskResumeAll>
 80034c6:	e76c      	b.n	80033a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034ca:	f000 fa17 	bl	80038fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ce:	f000 fcc5 	bl	8003e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3738      	adds	r7, #56	@ 0x38
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08e      	sub	sp, #56	@ 0x38
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <xQueueGenericSendFromISR+0x3e>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <xQueueGenericSendFromISR+0x42>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericSendFromISR+0x44>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	623b      	str	r3, [r7, #32]
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d103      	bne.n	800354e <xQueueGenericSendFromISR+0x6e>
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <xQueueGenericSendFromISR+0x72>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <xQueueGenericSendFromISR+0x74>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	61fb      	str	r3, [r7, #28]
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003570:	f001 fe62 	bl	8005238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003574:	f3ef 8211 	mrs	r2, BASEPRI
 8003578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	61ba      	str	r2, [r7, #24]
 800358a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800358c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <xQueueGenericSendFromISR+0xc2>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d12c      	bne.n	80035fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035b2:	f000 f913 	bl	80037dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d112      	bne.n	80035e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d016      	beq.n	80035f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	3324      	adds	r3, #36	@ 0x24
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fe5b 	bl	8004288 <xTaskRemoveFromEventList>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e007      	b.n	80035f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035ea:	3301      	adds	r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	b25a      	sxtb	r2, r3
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80035f6:	2301      	movs	r3, #1
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80035fa:	e001      	b.n	8003600 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800360a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800360c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800360e:	4618      	mov	r0, r3
 8003610:	3738      	adds	r7, #56	@ 0x38
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	@ 0x30
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <xQueueReceive+0x32>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	623b      	str	r3, [r7, #32]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <xQueueReceive+0x40>
 8003650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <xQueueReceive+0x44>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <xQueueReceive+0x46>
 800365c:	2300      	movs	r3, #0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <xQueueReceive+0x62>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61fb      	str	r3, [r7, #28]
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	e7fd      	b.n	8003676 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800367a:	f000 ffa5 	bl	80045c8 <xTaskGetSchedulerState>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <xQueueReceive+0x72>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <xQueueReceive+0x76>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <xQueueReceive+0x78>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <xQueueReceive+0x94>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	61bb      	str	r3, [r7, #24]
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036ac:	f001 fce4 	bl	8005078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01f      	beq.n	80036fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036c0:	f000 f8f6 	bl	80038b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	1e5a      	subs	r2, r3, #1
 80036c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00f      	beq.n	80036f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	3310      	adds	r3, #16
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fdd5 	bl	8004288 <xTaskRemoveFromEventList>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036e4:	4b3c      	ldr	r3, [pc, #240]	@ (80037d8 <xQueueReceive+0x1c0>)
 80036e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036f4:	f001 fcf2 	bl	80050dc <vPortExitCritical>
				return pdPASS;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e069      	b.n	80037d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003702:	f001 fceb 	bl	80050dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003706:	2300      	movs	r3, #0
 8003708:	e062      	b.n	80037d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800370a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003710:	f107 0310 	add.w	r3, r7, #16
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fe1b 	bl	8004350 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800371a:	2301      	movs	r3, #1
 800371c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800371e:	f001 fcdd 	bl	80050dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003722:	f000 fb8d 	bl	8003e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003726:	f001 fca7 	bl	8005078 <vPortEnterCritical>
 800372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003730:	b25b      	sxtb	r3, r3
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d103      	bne.n	8003740 <xQueueReceive+0x128>
 8003738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003746:	b25b      	sxtb	r3, r3
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d103      	bne.n	8003756 <xQueueReceive+0x13e>
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003756:	f001 fcc1 	bl	80050dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800375a:	1d3a      	adds	r2, r7, #4
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fe0a 	bl	800437c <xTaskCheckForTimeOut>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d123      	bne.n	80037b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800376e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003770:	f000 f916 	bl	80039a0 <prvIsQueueEmpty>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d017      	beq.n	80037aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	3324      	adds	r3, #36	@ 0x24
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fd2e 	bl	80041e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800378a:	f000 f8b7 	bl	80038fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800378e:	f000 fb65 	bl	8003e5c <xTaskResumeAll>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d189      	bne.n	80036ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <xQueueReceive+0x1c0>)
 800379a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	e780      	b.n	80036ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037ac:	f000 f8a6 	bl	80038fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037b0:	f000 fb54 	bl	8003e5c <xTaskResumeAll>
 80037b4:	e77a      	b.n	80036ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037b8:	f000 f8a0 	bl	80038fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037bc:	f000 fb4e 	bl	8003e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037c2:	f000 f8ed 	bl	80039a0 <prvIsQueueEmpty>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f43f af6f 	beq.w	80036ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3730      	adds	r7, #48	@ 0x30
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10d      	bne.n	8003816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d14d      	bne.n	800389e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fefc 	bl	8004604 <xTaskPriorityDisinherit>
 800380c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	e043      	b.n	800389e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d119      	bne.n	8003850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6858      	ldr	r0, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	461a      	mov	r2, r3
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	f001 ffba 	bl	80057a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	441a      	add	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	d32b      	bcc.n	800389e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	e026      	b.n	800389e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68d8      	ldr	r0, [r3, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	461a      	mov	r2, r3
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	f001 ffa0 	bl	80057a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	425b      	negs	r3, r3
 800386a:	441a      	add	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d207      	bcs.n	800388c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	425b      	negs	r3, r3
 8003886:	441a      	add	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d105      	bne.n	800389e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	3b01      	subs	r3, #1
 800389c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80038a6:	697b      	ldr	r3, [r7, #20]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d018      	beq.n	80038f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	441a      	add	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d303      	bcc.n	80038e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68d9      	ldr	r1, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	461a      	mov	r2, r3
 80038ee:	6838      	ldr	r0, [r7, #0]
 80038f0:	f001 ff56 	bl	80057a0 <memcpy>
	}
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003904:	f001 fbb8 	bl	8005078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800390e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003910:	e011      	b.n	8003936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3324      	adds	r3, #36	@ 0x24
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fcb2 	bl	8004288 <xTaskRemoveFromEventList>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800392a:	f000 fd8b 	bl	8004444 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	3b01      	subs	r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	dce9      	bgt.n	8003912 <prvUnlockQueue+0x16>
 800393e:	e000      	b.n	8003942 <prvUnlockQueue+0x46>
					break;
 8003940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	22ff      	movs	r2, #255	@ 0xff
 8003946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800394a:	f001 fbc7 	bl	80050dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800394e:	f001 fb93 	bl	8005078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800395a:	e011      	b.n	8003980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3310      	adds	r3, #16
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fc8d 	bl	8004288 <xTaskRemoveFromEventList>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003974:	f000 fd66 	bl	8004444 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	3b01      	subs	r3, #1
 800397c:	b2db      	uxtb	r3, r3
 800397e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003984:	2b00      	cmp	r3, #0
 8003986:	dce9      	bgt.n	800395c <prvUnlockQueue+0x60>
 8003988:	e000      	b.n	800398c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800398a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	22ff      	movs	r2, #255	@ 0xff
 8003990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003994:	f001 fba2 	bl	80050dc <vPortExitCritical>
}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039a8:	f001 fb66 	bl	8005078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e001      	b.n	80039be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039be:	f001 fb8d 	bl	80050dc <vPortExitCritical>

	return xReturn;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039d4:	f001 fb50 	bl	8005078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d102      	bne.n	80039ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e001      	b.n	80039ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ee:	f001 fb75 	bl	80050dc <vPortExitCritical>

	return xReturn;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e014      	b.n	8003a36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a4c <vQueueAddToRegistry+0x50>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a18:	490c      	ldr	r1, [pc, #48]	@ (8003a4c <vQueueAddToRegistry+0x50>)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <vQueueAddToRegistry+0x50>)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a2e:	e006      	b.n	8003a3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b07      	cmp	r3, #7
 8003a3a:	d9e7      	bls.n	8003a0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	200002e8 	.word	0x200002e8

08003a50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a60:	f001 fb0a 	bl	8005078 <vPortEnterCritical>
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a6a:	b25b      	sxtb	r3, r3
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d103      	bne.n	8003a7a <vQueueWaitForMessageRestricted+0x2a>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d103      	bne.n	8003a90 <vQueueWaitForMessageRestricted+0x40>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a90:	f001 fb24 	bl	80050dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3324      	adds	r3, #36	@ 0x24
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fbc3 	bl	8004230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003aaa:	6978      	ldr	r0, [r7, #20]
 8003aac:	f7ff ff26 	bl	80038fc <prvUnlockQueue>
	}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08c      	sub	sp, #48	@ 0x30
 8003abc:	af04      	add	r7, sp, #16
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fbf5 	bl	80052bc <pvPortMalloc>
 8003ad2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00e      	beq.n	8003af8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ada:	2058      	movs	r0, #88	@ 0x58
 8003adc:	f001 fbee 	bl	80052bc <pvPortMalloc>
 8003ae0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aee:	e005      	b.n	8003afc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f001 fcab 	bl	800544c <vPortFree>
 8003af6:	e001      	b.n	8003afc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	2300      	movs	r3, #0
 8003b06:	9303      	str	r3, [sp, #12]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	9302      	str	r3, [sp, #8]
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f80e 	bl	8003b3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b1e:	69f8      	ldr	r0, [r7, #28]
 8003b20:	f000 f89c 	bl	8003c5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b24:	2301      	movs	r3, #1
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e002      	b.n	8003b30 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b30:	69bb      	ldr	r3, [r7, #24]
	}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b088      	sub	sp, #32
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	461a      	mov	r2, r3
 8003b52:	21a5      	movs	r1, #165	@ 0xa5
 8003b54:	f001 fdcc 	bl	80056f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b62:	3b01      	subs	r3, #1
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f023 0307 	bic.w	r3, r3, #7
 8003b70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	617b      	str	r3, [r7, #20]
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01f      	beq.n	8003bda <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e012      	b.n	8003bc6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	7819      	ldrb	r1, [r3, #0]
 8003ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	3334      	adds	r3, #52	@ 0x34
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d9e9      	bls.n	8003ba0 <prvInitialiseNewTask+0x66>
 8003bcc:	e000      	b.n	8003bd0 <prvInitialiseNewTask+0x96>
			{
				break;
 8003bce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003bd8:	e003      	b.n	8003be2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d901      	bls.n	8003bec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003be8:	2304      	movs	r3, #4
 8003bea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bf6:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fa0c 	bl	8003020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	3318      	adds	r3, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fa07 	bl	8003020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	f1c3 0205 	rsb	r2, r3, #5
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c26:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	69b8      	ldr	r0, [r7, #24]
 8003c3c:	f001 f8ee 	bl	8004e1c <pxPortInitialiseStack>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c52:	bf00      	nop
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c64:	f001 fa08 	bl	8005078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c68:	4b2c      	ldr	r3, [pc, #176]	@ (8003d1c <prvAddNewTaskToReadyList+0xc0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d1c <prvAddNewTaskToReadyList+0xc0>)
 8003c70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c72:	4b2b      	ldr	r3, [pc, #172]	@ (8003d20 <prvAddNewTaskToReadyList+0xc4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c7a:	4a29      	ldr	r2, [pc, #164]	@ (8003d20 <prvAddNewTaskToReadyList+0xc4>)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c80:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <prvAddNewTaskToReadyList+0xc0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d110      	bne.n	8003caa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c88:	f000 fc00 	bl	800448c <prvInitialiseTaskLists>
 8003c8c:	e00d      	b.n	8003caa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c8e:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <prvAddNewTaskToReadyList+0xc8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c96:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <prvAddNewTaskToReadyList+0xc4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d802      	bhi.n	8003caa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <prvAddNewTaskToReadyList+0xc4>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003caa:	4b1f      	ldr	r3, [pc, #124]	@ (8003d28 <prvAddNewTaskToReadyList+0xcc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <prvAddNewTaskToReadyList+0xcc>)
 8003cb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d28 <prvAddNewTaskToReadyList+0xcc>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <prvAddNewTaskToReadyList+0xd0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <prvAddNewTaskToReadyList+0xd0>)
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <prvAddNewTaskToReadyList+0xd4>)
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7ff f9a8 	bl	800303a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cea:	f001 f9f7 	bl	80050dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <prvAddNewTaskToReadyList+0xc8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00e      	beq.n	8003d14 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <prvAddNewTaskToReadyList+0xc4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d207      	bcs.n	8003d14 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <prvAddNewTaskToReadyList+0xd8>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000400 	.word	0x20000400
 8003d20:	20000328 	.word	0x20000328
 8003d24:	2000040c 	.word	0x2000040c
 8003d28:	2000041c 	.word	0x2000041c
 8003d2c:	20000408 	.word	0x20000408
 8003d30:	2000032c 	.word	0x2000032c
 8003d34:	e000ed04 	.word	0xe000ed04

08003d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <vTaskDelay+0x64>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <vTaskDelay+0x32>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	60bb      	str	r3, [r7, #8]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d6a:	f000 f869 	bl	8003e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d6e:	2100      	movs	r1, #0
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fccf 	bl	8004714 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d76:	f000 f871 	bl	8003e5c <xTaskResumeAll>
 8003d7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d82:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <vTaskDelay+0x68>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000428 	.word	0x20000428
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003daa:	4b1f      	ldr	r3, [pc, #124]	@ (8003e28 <vTaskStartScheduler+0x84>)
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2282      	movs	r2, #130	@ 0x82
 8003db6:	491d      	ldr	r1, [pc, #116]	@ (8003e2c <vTaskStartScheduler+0x88>)
 8003db8:	481d      	ldr	r0, [pc, #116]	@ (8003e30 <vTaskStartScheduler+0x8c>)
 8003dba:	f7ff fe7d 	bl	8003ab8 <xTaskCreate>
 8003dbe:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d102      	bne.n	8003dcc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003dc6:	f000 fd0b 	bl	80047e0 <xTimerCreateTimerTask>
 8003dca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d116      	bne.n	8003e00 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60bb      	str	r3, [r7, #8]
}
 8003de4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003de6:	4b13      	ldr	r3, [pc, #76]	@ (8003e34 <vTaskStartScheduler+0x90>)
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dee:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <vTaskStartScheduler+0x94>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003df4:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <vTaskStartScheduler+0x98>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dfa:	f001 f899 	bl	8004f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dfe:	e00f      	b.n	8003e20 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d10b      	bne.n	8003e20 <vTaskStartScheduler+0x7c>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	607b      	str	r3, [r7, #4]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <vTaskStartScheduler+0x78>
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000424 	.word	0x20000424
 8003e2c:	080061b4 	.word	0x080061b4
 8003e30:	0800445d 	.word	0x0800445d
 8003e34:	20000420 	.word	0x20000420
 8003e38:	2000040c 	.word	0x2000040c
 8003e3c:	20000404 	.word	0x20000404

08003e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e44:	4b04      	ldr	r3, [pc, #16]	@ (8003e58 <vTaskSuspendAll+0x18>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a03      	ldr	r2, [pc, #12]	@ (8003e58 <vTaskSuspendAll+0x18>)
 8003e4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000428 	.word	0x20000428

08003e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e6a:	4b42      	ldr	r3, [pc, #264]	@ (8003f74 <xTaskResumeAll+0x118>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <xTaskResumeAll+0x2e>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	603b      	str	r3, [r7, #0]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e8a:	f001 f8f5 	bl	8005078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e8e:	4b39      	ldr	r3, [pc, #228]	@ (8003f74 <xTaskResumeAll+0x118>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4a37      	ldr	r2, [pc, #220]	@ (8003f74 <xTaskResumeAll+0x118>)
 8003e96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e98:	4b36      	ldr	r3, [pc, #216]	@ (8003f74 <xTaskResumeAll+0x118>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d161      	bne.n	8003f64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ea0:	4b35      	ldr	r3, [pc, #212]	@ (8003f78 <xTaskResumeAll+0x11c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05d      	beq.n	8003f64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ea8:	e02e      	b.n	8003f08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eaa:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <xTaskResumeAll+0x120>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff f91c 	bl	80030f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff f917 	bl	80030f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	2201      	movs	r2, #1
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	4b2c      	ldr	r3, [pc, #176]	@ (8003f80 <xTaskResumeAll+0x124>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f80 <xTaskResumeAll+0x124>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4a27      	ldr	r2, [pc, #156]	@ (8003f84 <xTaskResumeAll+0x128>)
 8003ee6:	441a      	add	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7ff f8a3 	bl	800303a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef8:	4b23      	ldr	r3, [pc, #140]	@ (8003f88 <xTaskResumeAll+0x12c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f02:	4b22      	ldr	r3, [pc, #136]	@ (8003f8c <xTaskResumeAll+0x130>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f08:	4b1c      	ldr	r3, [pc, #112]	@ (8003f7c <xTaskResumeAll+0x120>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1cc      	bne.n	8003eaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f16:	f000 fb37 	bl	8004588 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <xTaskResumeAll+0x134>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f26:	f000 f847 	bl	8003fb8 <xTaskIncrementTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f30:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <xTaskResumeAll+0x130>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f1      	bne.n	8003f26 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003f42:	4b13      	ldr	r3, [pc, #76]	@ (8003f90 <xTaskResumeAll+0x134>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f48:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <xTaskResumeAll+0x130>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <xTaskResumeAll+0x138>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f64:	f001 f8ba 	bl	80050dc <vPortExitCritical>

	return xAlreadyYielded;
 8003f68:	68bb      	ldr	r3, [r7, #8]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000428 	.word	0x20000428
 8003f78:	20000400 	.word	0x20000400
 8003f7c:	200003c0 	.word	0x200003c0
 8003f80:	20000408 	.word	0x20000408
 8003f84:	2000032c 	.word	0x2000032c
 8003f88:	20000328 	.word	0x20000328
 8003f8c:	20000414 	.word	0x20000414
 8003f90:	20000410 	.word	0x20000410
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f9e:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <xTaskGetTickCount+0x1c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fa4:	687b      	ldr	r3, [r7, #4]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000404 	.word	0x20000404

08003fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004100 <xTaskIncrementTick+0x148>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 8089 	bne.w	80040de <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8004104 <xTaskIncrementTick+0x14c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8004104 <xTaskIncrementTick+0x14c>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d121      	bne.n	8004024 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fe0:	4b49      	ldr	r3, [pc, #292]	@ (8004108 <xTaskIncrementTick+0x150>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	603b      	str	r3, [r7, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	e7fd      	b.n	8003ffe <xTaskIncrementTick+0x46>
 8004002:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <xTaskIncrementTick+0x150>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	4b40      	ldr	r3, [pc, #256]	@ (800410c <xTaskIncrementTick+0x154>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a3e      	ldr	r2, [pc, #248]	@ (8004108 <xTaskIncrementTick+0x150>)
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4a3e      	ldr	r2, [pc, #248]	@ (800410c <xTaskIncrementTick+0x154>)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	4b3e      	ldr	r3, [pc, #248]	@ (8004110 <xTaskIncrementTick+0x158>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	4a3c      	ldr	r2, [pc, #240]	@ (8004110 <xTaskIncrementTick+0x158>)
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	f000 fab2 	bl	8004588 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004024:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <xTaskIncrementTick+0x15c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	d348      	bcc.n	80040c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800402e:	4b36      	ldr	r3, [pc, #216]	@ (8004108 <xTaskIncrementTick+0x150>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004038:	4b36      	ldr	r3, [pc, #216]	@ (8004114 <xTaskIncrementTick+0x15c>)
 800403a:	f04f 32ff 	mov.w	r2, #4294967295
 800403e:	601a      	str	r2, [r3, #0]
					break;
 8004040:	e03e      	b.n	80040c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004042:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <xTaskIncrementTick+0x150>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d203      	bcs.n	8004062 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800405a:	4a2e      	ldr	r2, [pc, #184]	@ (8004114 <xTaskIncrementTick+0x15c>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004060:	e02e      	b.n	80040c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff f844 	bl	80030f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	3318      	adds	r3, #24
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f83b 	bl	80030f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	2201      	movs	r2, #1
 8004084:	409a      	lsls	r2, r3
 8004086:	4b24      	ldr	r3, [pc, #144]	@ (8004118 <xTaskIncrementTick+0x160>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <xTaskIncrementTick+0x160>)
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4a1f      	ldr	r2, [pc, #124]	@ (800411c <xTaskIncrementTick+0x164>)
 800409e:	441a      	add	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f7fe ffc7 	bl	800303a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <xTaskIncrementTick+0x168>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3b9      	bcc.n	800402e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80040ba:	2301      	movs	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040be:	e7b6      	b.n	800402e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040c0:	4b17      	ldr	r3, [pc, #92]	@ (8004120 <xTaskIncrementTick+0x168>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	4915      	ldr	r1, [pc, #84]	@ (800411c <xTaskIncrementTick+0x164>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d907      	bls.n	80040e8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e004      	b.n	80040e8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040de:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <xTaskIncrementTick+0x16c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004124 <xTaskIncrementTick+0x16c>)
 80040e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <xTaskIncrementTick+0x170>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040f4:	697b      	ldr	r3, [r7, #20]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000428 	.word	0x20000428
 8004104:	20000404 	.word	0x20000404
 8004108:	200003b8 	.word	0x200003b8
 800410c:	200003bc 	.word	0x200003bc
 8004110:	20000418 	.word	0x20000418
 8004114:	20000420 	.word	0x20000420
 8004118:	20000408 	.word	0x20000408
 800411c:	2000032c 	.word	0x2000032c
 8004120:	20000328 	.word	0x20000328
 8004124:	20000410 	.word	0x20000410
 8004128:	20000414 	.word	0x20000414

0800412c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004132:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <vTaskSwitchContext+0xa4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800413a:	4b26      	ldr	r3, [pc, #152]	@ (80041d4 <vTaskSwitchContext+0xa8>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004140:	e040      	b.n	80041c4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004142:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <vTaskSwitchContext+0xa8>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004148:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <vTaskSwitchContext+0xac>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004156:	7afb      	ldrb	r3, [r7, #11]
 8004158:	f1c3 031f 	rsb	r3, r3, #31
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	491f      	ldr	r1, [pc, #124]	@ (80041dc <vTaskSwitchContext+0xb0>)
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	607b      	str	r3, [r7, #4]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <vTaskSwitchContext+0x5a>
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4a11      	ldr	r2, [pc, #68]	@ (80041dc <vTaskSwitchContext+0xb0>)
 8004196:	4413      	add	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	3308      	adds	r3, #8
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d104      	bne.n	80041ba <vTaskSwitchContext+0x8e>
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	4a07      	ldr	r2, [pc, #28]	@ (80041e0 <vTaskSwitchContext+0xb4>)
 80041c2:	6013      	str	r3, [r2, #0]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000428 	.word	0x20000428
 80041d4:	20000414 	.word	0x20000414
 80041d8:	20000408 	.word	0x20000408
 80041dc:	2000032c 	.word	0x2000032c
 80041e0:	20000328 	.word	0x20000328

080041e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800420c:	4b07      	ldr	r3, [pc, #28]	@ (800422c <vTaskPlaceOnEventList+0x48>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3318      	adds	r3, #24
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe ff34 	bl	8003082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800421a:	2101      	movs	r1, #1
 800421c:	6838      	ldr	r0, [r7, #0]
 800421e:	f000 fa79 	bl	8004714 <prvAddCurrentTaskToDelayedList>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000328 	.word	0x20000328

08004230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	617b      	str	r3, [r7, #20]
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800425a:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <vTaskPlaceOnEventListRestricted+0x54>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3318      	adds	r3, #24
 8004260:	4619      	mov	r1, r3
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7fe fee9 	bl	800303a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f000 fa4c 	bl	8004714 <prvAddCurrentTaskToDelayedList>
	}
 800427c:	bf00      	nop
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000328 	.word	0x20000328

08004288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	e7fd      	b.n	80042b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	3318      	adds	r3, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe ff1a 	bl	80030f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <xTaskRemoveFromEventList+0xb0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d11c      	bne.n	8004302 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe ff11 	bl	80030f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	2201      	movs	r2, #1
 80042d8:	409a      	lsls	r2, r3
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <xTaskRemoveFromEventList+0xb4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4313      	orrs	r3, r2
 80042e0:	4a16      	ldr	r2, [pc, #88]	@ (800433c <xTaskRemoveFromEventList+0xb4>)
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4a13      	ldr	r2, [pc, #76]	@ (8004340 <xTaskRemoveFromEventList+0xb8>)
 80042f2:	441a      	add	r2, r3
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f7fe fe9d 	bl	800303a <vListInsertEnd>
 8004300:	e005      	b.n	800430e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3318      	adds	r3, #24
 8004306:	4619      	mov	r1, r3
 8004308:	480e      	ldr	r0, [pc, #56]	@ (8004344 <xTaskRemoveFromEventList+0xbc>)
 800430a:	f7fe fe96 	bl	800303a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <xTaskRemoveFromEventList+0xc0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d905      	bls.n	8004328 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <xTaskRemoveFromEventList+0xc4>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e001      	b.n	800432c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800432c:	697b      	ldr	r3, [r7, #20]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000428 	.word	0x20000428
 800433c:	20000408 	.word	0x20000408
 8004340:	2000032c 	.word	0x2000032c
 8004344:	200003c0 	.word	0x200003c0
 8004348:	20000328 	.word	0x20000328
 800434c:	20000414 	.word	0x20000414

08004350 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <vTaskInternalSetTimeOutState+0x24>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004360:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <vTaskInternalSetTimeOutState+0x28>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	605a      	str	r2, [r3, #4]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	20000418 	.word	0x20000418
 8004378:	20000404 	.word	0x20000404

0800437c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	613b      	str	r3, [r7, #16]
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	e7fd      	b.n	80043be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80043c2:	f000 fe59 	bl	8005078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043c6:	4b1d      	ldr	r3, [pc, #116]	@ (800443c <xTaskCheckForTimeOut+0xc0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d102      	bne.n	80043e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	e023      	b.n	800442e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <xTaskCheckForTimeOut+0xc4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d007      	beq.n	8004402 <xTaskCheckForTimeOut+0x86>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	e015      	b.n	800442e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	429a      	cmp	r2, r3
 800440a:	d20b      	bcs.n	8004424 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff99 	bl	8004350 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e004      	b.n	800442e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800442e:	f000 fe55 	bl	80050dc <vPortExitCritical>

	return xReturn;
 8004432:	69fb      	ldr	r3, [r7, #28]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3720      	adds	r7, #32
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20000404 	.word	0x20000404
 8004440:	20000418 	.word	0x20000418

08004444 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004448:	4b03      	ldr	r3, [pc, #12]	@ (8004458 <vTaskMissedYield+0x14>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	20000414 	.word	0x20000414

0800445c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004464:	f000 f852 	bl	800450c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004468:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <prvIdleTask+0x28>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d9f9      	bls.n	8004464 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <prvIdleTask+0x2c>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004480:	e7f0      	b.n	8004464 <prvIdleTask+0x8>
 8004482:	bf00      	nop
 8004484:	2000032c 	.word	0x2000032c
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	e00c      	b.n	80044b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4a12      	ldr	r2, [pc, #72]	@ (80044ec <prvInitialiseTaskLists+0x60>)
 80044a4:	4413      	add	r3, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe fd9a 	bl	8002fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3301      	adds	r3, #1
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d9ef      	bls.n	8004498 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044b8:	480d      	ldr	r0, [pc, #52]	@ (80044f0 <prvInitialiseTaskLists+0x64>)
 80044ba:	f7fe fd91 	bl	8002fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044be:	480d      	ldr	r0, [pc, #52]	@ (80044f4 <prvInitialiseTaskLists+0x68>)
 80044c0:	f7fe fd8e 	bl	8002fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044c4:	480c      	ldr	r0, [pc, #48]	@ (80044f8 <prvInitialiseTaskLists+0x6c>)
 80044c6:	f7fe fd8b 	bl	8002fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044ca:	480c      	ldr	r0, [pc, #48]	@ (80044fc <prvInitialiseTaskLists+0x70>)
 80044cc:	f7fe fd88 	bl	8002fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044d0:	480b      	ldr	r0, [pc, #44]	@ (8004500 <prvInitialiseTaskLists+0x74>)
 80044d2:	f7fe fd85 	bl	8002fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <prvInitialiseTaskLists+0x78>)
 80044d8:	4a05      	ldr	r2, [pc, #20]	@ (80044f0 <prvInitialiseTaskLists+0x64>)
 80044da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <prvInitialiseTaskLists+0x7c>)
 80044de:	4a05      	ldr	r2, [pc, #20]	@ (80044f4 <prvInitialiseTaskLists+0x68>)
 80044e0:	601a      	str	r2, [r3, #0]
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2000032c 	.word	0x2000032c
 80044f0:	20000390 	.word	0x20000390
 80044f4:	200003a4 	.word	0x200003a4
 80044f8:	200003c0 	.word	0x200003c0
 80044fc:	200003d4 	.word	0x200003d4
 8004500:	200003ec 	.word	0x200003ec
 8004504:	200003b8 	.word	0x200003b8
 8004508:	200003bc 	.word	0x200003bc

0800450c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004512:	e019      	b.n	8004548 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004514:	f000 fdb0 	bl	8005078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004518:	4b10      	ldr	r3, [pc, #64]	@ (800455c <prvCheckTasksWaitingTermination+0x50>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3304      	adds	r3, #4
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe fde5 	bl	80030f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800452a:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <prvCheckTasksWaitingTermination+0x54>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3b01      	subs	r3, #1
 8004530:	4a0b      	ldr	r2, [pc, #44]	@ (8004560 <prvCheckTasksWaitingTermination+0x54>)
 8004532:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <prvCheckTasksWaitingTermination+0x58>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3b01      	subs	r3, #1
 800453a:	4a0a      	ldr	r2, [pc, #40]	@ (8004564 <prvCheckTasksWaitingTermination+0x58>)
 800453c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800453e:	f000 fdcd 	bl	80050dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f810 	bl	8004568 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004548:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <prvCheckTasksWaitingTermination+0x58>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e1      	bne.n	8004514 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200003d4 	.word	0x200003d4
 8004560:	20000400 	.word	0x20000400
 8004564:	200003e8 	.word	0x200003e8

08004568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	4618      	mov	r0, r3
 8004576:	f000 ff69 	bl	800544c <vPortFree>
			vPortFree( pxTCB );
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 ff66 	bl	800544c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800458e:	4b0c      	ldr	r3, [pc, #48]	@ (80045c0 <prvResetNextTaskUnblockTime+0x38>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004598:	4b0a      	ldr	r3, [pc, #40]	@ (80045c4 <prvResetNextTaskUnblockTime+0x3c>)
 800459a:	f04f 32ff 	mov.w	r2, #4294967295
 800459e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045a0:	e008      	b.n	80045b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a2:	4b07      	ldr	r3, [pc, #28]	@ (80045c0 <prvResetNextTaskUnblockTime+0x38>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <prvResetNextTaskUnblockTime+0x3c>)
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	200003b8 	.word	0x200003b8
 80045c4:	20000420 	.word	0x20000420

080045c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ce:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <xTaskGetSchedulerState+0x34>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045d6:	2301      	movs	r3, #1
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	e008      	b.n	80045ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <xTaskGetSchedulerState+0x38>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045e4:	2302      	movs	r3, #2
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	e001      	b.n	80045ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ee:	687b      	ldr	r3, [r7, #4]
	}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	2000040c 	.word	0x2000040c
 8004600:	20000428 	.word	0x20000428

08004604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d070      	beq.n	80046fc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800461a:	4b3b      	ldr	r3, [pc, #236]	@ (8004708 <xTaskPriorityDisinherit+0x104>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d00b      	beq.n	800463c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60bb      	str	r3, [r7, #8]
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	e7fd      	b.n	8004658 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466e:	429a      	cmp	r2, r3
 8004670:	d044      	beq.n	80046fc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d140      	bne.n	80046fc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3304      	adds	r3, #4
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fd38 	bl	80030f4 <uxListRemove>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d115      	bne.n	80046b6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468e:	491f      	ldr	r1, [pc, #124]	@ (800470c <xTaskPriorityDisinherit+0x108>)
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <xTaskPriorityDisinherit+0xb2>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	2201      	movs	r2, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	4b18      	ldr	r3, [pc, #96]	@ (8004710 <xTaskPriorityDisinherit+0x10c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4013      	ands	r3, r2
 80046b2:	4a17      	ldr	r2, [pc, #92]	@ (8004710 <xTaskPriorityDisinherit+0x10c>)
 80046b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	f1c3 0205 	rsb	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	2201      	movs	r2, #1
 80046d0:	409a      	lsls	r2, r3
 80046d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <xTaskPriorityDisinherit+0x10c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004710 <xTaskPriorityDisinherit+0x10c>)
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4a08      	ldr	r2, [pc, #32]	@ (800470c <xTaskPriorityDisinherit+0x108>)
 80046ea:	441a      	add	r2, r3
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7fe fca1 	bl	800303a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046f8:	2301      	movs	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046fc:	697b      	ldr	r3, [r7, #20]
	}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000328 	.word	0x20000328
 800470c:	2000032c 	.word	0x2000032c
 8004710:	20000408 	.word	0x20000408

08004714 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800471e:	4b29      	ldr	r3, [pc, #164]	@ (80047c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004724:	4b28      	ldr	r3, [pc, #160]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3304      	adds	r3, #4
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe fce2 	bl	80030f4 <uxListRemove>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	2201      	movs	r2, #1
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	4b21      	ldr	r3, [pc, #132]	@ (80047cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4013      	ands	r3, r2
 800474a:	4a20      	ldr	r2, [pc, #128]	@ (80047cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800474c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d10a      	bne.n	800476c <prvAddCurrentTaskToDelayedList+0x58>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800475c:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3304      	adds	r3, #4
 8004762:	4619      	mov	r1, r3
 8004764:	481a      	ldr	r0, [pc, #104]	@ (80047d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004766:	f7fe fc68 	bl	800303a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800476a:	e026      	b.n	80047ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004774:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d209      	bcs.n	8004798 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004784:	4b13      	ldr	r3, [pc, #76]	@ (80047d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b0f      	ldr	r3, [pc, #60]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7fe fc76 	bl	8003082 <vListInsert>
}
 8004796:	e010      	b.n	80047ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004798:	4b0f      	ldr	r3, [pc, #60]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe fc6c 	bl	8003082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047aa:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d202      	bcs.n	80047ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047b4:	4a09      	ldr	r2, [pc, #36]	@ (80047dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000404 	.word	0x20000404
 80047c8:	20000328 	.word	0x20000328
 80047cc:	20000408 	.word	0x20000408
 80047d0:	200003ec 	.word	0x200003ec
 80047d4:	200003bc 	.word	0x200003bc
 80047d8:	200003b8 	.word	0x200003b8
 80047dc:	20000420 	.word	0x20000420

080047e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047ea:	f000 fae1 	bl	8004db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047ee:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <xTimerCreateTimerTask+0x58>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80047f6:	4b11      	ldr	r3, [pc, #68]	@ (800483c <xTimerCreateTimerTask+0x5c>)
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	2302      	movs	r3, #2
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004804:	490e      	ldr	r1, [pc, #56]	@ (8004840 <xTimerCreateTimerTask+0x60>)
 8004806:	480f      	ldr	r0, [pc, #60]	@ (8004844 <xTimerCreateTimerTask+0x64>)
 8004808:	f7ff f956 	bl	8003ab8 <xTaskCreate>
 800480c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	603b      	str	r3, [r7, #0]
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800482c:	687b      	ldr	r3, [r7, #4]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000045c 	.word	0x2000045c
 800483c:	20000460 	.word	0x20000460
 8004840:	080061bc 	.word	0x080061bc
 8004844:	08004981 	.word	0x08004981

08004848 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <xTimerGenericCommand+0x30>
	__asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	623b      	str	r3, [r7, #32]
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	e7fd      	b.n	8004874 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004878:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <xTimerGenericCommand+0x98>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02a      	beq.n	80048d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b05      	cmp	r3, #5
 8004890:	dc18      	bgt.n	80048c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004892:	f7ff fe99 	bl	80045c8 <xTaskGetSchedulerState>
 8004896:	4603      	mov	r3, r0
 8004898:	2b02      	cmp	r3, #2
 800489a:	d109      	bne.n	80048b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800489c:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <xTimerGenericCommand+0x98>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	f107 0114 	add.w	r1, r7, #20
 80048a4:	2300      	movs	r3, #0
 80048a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a8:	f7fe fd18 	bl	80032dc <xQueueGenericSend>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80048ae:	e012      	b.n	80048d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <xTimerGenericCommand+0x98>)
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	f107 0114 	add.w	r1, r7, #20
 80048b8:	2300      	movs	r3, #0
 80048ba:	2200      	movs	r2, #0
 80048bc:	f7fe fd0e 	bl	80032dc <xQueueGenericSend>
 80048c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80048c2:	e008      	b.n	80048d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <xTimerGenericCommand+0x98>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	f107 0114 	add.w	r1, r7, #20
 80048cc:	2300      	movs	r3, #0
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	f7fe fe06 	bl	80034e0 <xQueueGenericSendFromISR>
 80048d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	2000045c 	.word	0x2000045c

080048e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ee:	4b23      	ldr	r3, [pc, #140]	@ (800497c <prvProcessExpiredTimer+0x98>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe fbf9 	bl	80030f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d023      	beq.n	8004958 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f000 f8d5 	bl	8004acc <prvInsertTimerInActiveList>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d020      	beq.n	800496a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004928:	2300      	movs	r3, #0
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2300      	movs	r3, #0
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f7ff ff88 	bl	8004848 <xTimerGenericCommand>
 8004938:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d114      	bne.n	800496a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	6978      	ldr	r0, [r7, #20]
 8004970:	4798      	blx	r3
}
 8004972:	bf00      	nop
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000454 	.word	0x20000454

08004980 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004988:	f107 0308 	add.w	r3, r7, #8
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f859 	bl	8004a44 <prvGetNextExpireTime>
 8004992:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4619      	mov	r1, r3
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f805 	bl	80049a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800499e:	f000 f8d7 	bl	8004b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049a2:	bf00      	nop
 80049a4:	e7f0      	b.n	8004988 <prvTimerTask+0x8>
	...

080049a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049b2:	f7ff fa45 	bl	8003e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f866 	bl	8004a8c <prvSampleTimeNow>
 80049c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d130      	bne.n	8004a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <prvProcessTimerOrBlockTask+0x3c>
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d806      	bhi.n	80049e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049d6:	f7ff fa41 	bl	8003e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ff81 	bl	80048e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049e2:	e024      	b.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049ea:	4b13      	ldr	r3, [pc, #76]	@ (8004a38 <prvProcessTimerOrBlockTask+0x90>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <prvProcessTimerOrBlockTask+0x50>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <prvProcessTimerOrBlockTask+0x52>
 80049f8:	2300      	movs	r3, #0
 80049fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049fc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a3c <prvProcessTimerOrBlockTask+0x94>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f7ff f821 	bl	8003a50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a0e:	f7ff fa25 	bl	8003e5c <xTaskResumeAll>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a18:	4b09      	ldr	r3, [pc, #36]	@ (8004a40 <prvProcessTimerOrBlockTask+0x98>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
}
 8004a28:	e001      	b.n	8004a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a2a:	f7ff fa17 	bl	8003e5c <xTaskResumeAll>
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000458 	.word	0x20000458
 8004a3c:	2000045c 	.word	0x2000045c
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <prvGetNextExpireTime+0x44>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <prvGetNextExpireTime+0x16>
 8004a56:	2201      	movs	r2, #1
 8004a58:	e000      	b.n	8004a5c <prvGetNextExpireTime+0x18>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a68:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <prvGetNextExpireTime+0x44>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e001      	b.n	8004a78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000454 	.word	0x20000454

08004a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a94:	f7ff fa80 	bl	8003f98 <xTaskGetTickCount>
 8004a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <prvSampleTimeNow+0x3c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d205      	bcs.n	8004ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004aa4:	f000 f91e 	bl	8004ce4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <prvSampleTimeNow+0x3c>)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000464 	.word	0x20000464

08004acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d812      	bhi.n	8004b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	1ad2      	subs	r2, r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b00:	2301      	movs	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e01b      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b06:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <prvInsertTimerInActiveList+0x7c>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f7fe fab6 	bl	8003082 <vListInsert>
 8004b16:	e012      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d206      	bcs.n	8004b2e <prvInsertTimerInActiveList+0x62>
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e007      	b.n	8004b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b2e:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <prvInsertTimerInActiveList+0x80>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f7fe faa2 	bl	8003082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b3e:	697b      	ldr	r3, [r7, #20]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000458 	.word	0x20000458
 8004b4c:	20000454 	.word	0x20000454

08004b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	@ 0x30
 8004b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b56:	e0b2      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f2c0 80af 	blt.w	8004cbe <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fabf 	bl	80030f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff87 	bl	8004a8c <prvSampleTimeNow>
 8004b7e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	f200 8098 	bhi.w	8004cb8 <prvProcessReceivedCommands+0x168>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <prvProcessReceivedCommands+0x40>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004bb9 	.word	0x08004bb9
 8004b9c:	08004c2f 	.word	0x08004c2f
 8004ba0:	08004c43 	.word	0x08004c43
 8004ba4:	08004c8f 	.word	0x08004c8f
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bb9 	.word	0x08004bb9
 8004bb0:	08004c2f 	.word	0x08004c2f
 8004bb4:	08004c43 	.word	0x08004c43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	18d1      	adds	r1, r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a3a      	ldr	r2, [r7, #32]
 8004bd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bd8:	f7ff ff78 	bl	8004acc <prvInsertTimerInActiveList>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d06c      	beq.n	8004cbc <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004be8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d061      	beq.n	8004cbc <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	441a      	add	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c0a:	f7ff fe1d 	bl	8004848 <xTimerGenericCommand>
 8004c0e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d152      	bne.n	8004cbc <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	61bb      	str	r3, [r7, #24]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c40:	e03d      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10b      	bne.n	8004c7a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	617b      	str	r3, [r7, #20]
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	e7fd      	b.n	8004c76 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	18d1      	adds	r1, r2, r3
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c88:	f7ff ff20 	bl	8004acc <prvInsertTimerInActiveList>
					break;
 8004c8c:	e017      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004c9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c9e:	f000 fbd5 	bl	800544c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ca2:	e00c      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cb6:	e002      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <prvProcessReceivedCommands+0x16e>
					break;
 8004cbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cbe:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <prvProcessReceivedCommands+0x190>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f107 0108 	add.w	r1, r7, #8
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe fca5 	bl	8003618 <xQueueReceive>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f af41 	bne.w	8004b58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3728      	adds	r7, #40	@ 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	2000045c 	.word	0x2000045c

08004ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cea:	e049      	b.n	8004d80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cec:	4b2e      	ldr	r3, [pc, #184]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe f9f5 	bl	80030f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02f      	beq.n	8004d80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d90e      	bls.n	8004d50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fe f99a 	bl	8003082 <vListInsert>
 8004d4e:	e017      	b.n	8004d80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d50:	2300      	movs	r3, #0
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f7ff fd74 	bl	8004848 <xTimerGenericCommand>
 8004d60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	603b      	str	r3, [r7, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1b0      	bne.n	8004cec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d8a:	4b07      	ldr	r3, [pc, #28]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <prvSwitchTimerLists+0xc8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a04      	ldr	r2, [pc, #16]	@ (8004da8 <prvSwitchTimerLists+0xc4>)
 8004d96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d98:	4a04      	ldr	r2, [pc, #16]	@ (8004dac <prvSwitchTimerLists+0xc8>)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6013      	str	r3, [r2, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000454 	.word	0x20000454
 8004dac:	20000458 	.word	0x20000458

08004db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004db4:	f000 f960 	bl	8005078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004db8:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11d      	bne.n	8004dfc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dc0:	4811      	ldr	r0, [pc, #68]	@ (8004e08 <prvCheckForValidListAndQueue+0x58>)
 8004dc2:	f7fe f90d 	bl	8002fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dc6:	4811      	ldr	r0, [pc, #68]	@ (8004e0c <prvCheckForValidListAndQueue+0x5c>)
 8004dc8:	f7fe f90a 	bl	8002fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dcc:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <prvCheckForValidListAndQueue+0x60>)
 8004dce:	4a0e      	ldr	r2, [pc, #56]	@ (8004e08 <prvCheckForValidListAndQueue+0x58>)
 8004dd0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004dd2:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <prvCheckForValidListAndQueue+0x64>)
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e0c <prvCheckForValidListAndQueue+0x5c>)
 8004dd6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004dd8:	2200      	movs	r2, #0
 8004dda:	210c      	movs	r1, #12
 8004ddc:	200a      	movs	r0, #10
 8004dde:	f7fe fa1d 	bl	800321c <xQueueGenericCreate>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4a07      	ldr	r2, [pc, #28]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004de6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004df0:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <prvCheckForValidListAndQueue+0x54>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4908      	ldr	r1, [pc, #32]	@ (8004e18 <prvCheckForValidListAndQueue+0x68>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fe fe00 	bl	80039fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dfc:	f000 f96e 	bl	80050dc <vPortExitCritical>
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	2000045c 	.word	0x2000045c
 8004e08:	2000042c 	.word	0x2000042c
 8004e0c:	20000440 	.word	0x20000440
 8004e10:	20000454 	.word	0x20000454
 8004e14:	20000458 	.word	0x20000458
 8004e18:	080061c4 	.word	0x080061c4

08004e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b04      	subs	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e80 <pxPortInitialiseStack+0x64>)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b14      	subs	r3, #20
 8004e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f06f 0202 	mvn.w	r2, #2
 8004e6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3b20      	subs	r3, #32
 8004e70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e72:	68fb      	ldr	r3, [r7, #12]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	08004e85 	.word	0x08004e85

08004e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e8e:	4b13      	ldr	r3, [pc, #76]	@ (8004edc <prvTaskExitError+0x58>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d00b      	beq.n	8004eb0 <prvTaskExitError+0x2c>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	60fb      	str	r3, [r7, #12]
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <prvTaskExitError+0x28>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60bb      	str	r3, [r7, #8]
}
 8004ec2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ec4:	bf00      	nop
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0fc      	beq.n	8004ec6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	2000000c 	.word	0x2000000c

08004ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <pxCurrentTCBConst2>)
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	6808      	ldr	r0, [r1, #0]
 8004ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	f380 8809 	msr	PSP, r0
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f380 8811 	msr	BASEPRI, r0
 8004efa:	4770      	bx	lr
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst2>:
 8004f00:	20000328 	.word	0x20000328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f08:	4808      	ldr	r0, [pc, #32]	@ (8004f2c <prvPortStartFirstTask+0x24>)
 8004f0a:	6800      	ldr	r0, [r0, #0]
 8004f0c:	6800      	ldr	r0, [r0, #0]
 8004f0e:	f380 8808 	msr	MSP, r0
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8814 	msr	CONTROL, r0
 8004f1a:	b662      	cpsie	i
 8004f1c:	b661      	cpsie	f
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	df00      	svc	0
 8004f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f2a:	bf00      	nop
 8004f2c:	e000ed08 	.word	0xe000ed08

08004f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f36:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <xPortStartScheduler+0x124>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a47      	ldr	r2, [pc, #284]	@ (8005058 <xPortStartScheduler+0x128>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10b      	bne.n	8004f58 <xPortStartScheduler+0x28>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f58:	4b3e      	ldr	r3, [pc, #248]	@ (8005054 <xPortStartScheduler+0x124>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800505c <xPortStartScheduler+0x12c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d10b      	bne.n	8004f7a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	60fb      	str	r3, [r7, #12]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f7a:	4b39      	ldr	r3, [pc, #228]	@ (8005060 <xPortStartScheduler+0x130>)
 8004f7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	22ff      	movs	r2, #255	@ 0xff
 8004f8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <xPortStartScheduler+0x134>)
 8004fa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fa2:	4b31      	ldr	r3, [pc, #196]	@ (8005068 <xPortStartScheduler+0x138>)
 8004fa4:	2207      	movs	r2, #7
 8004fa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fa8:	e009      	b.n	8004fbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004faa:	4b2f      	ldr	r3, [pc, #188]	@ (8005068 <xPortStartScheduler+0x138>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <xPortStartScheduler+0x138>)
 8004fb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc6:	2b80      	cmp	r3, #128	@ 0x80
 8004fc8:	d0ef      	beq.n	8004faa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fca:	4b27      	ldr	r3, [pc, #156]	@ (8005068 <xPortStartScheduler+0x138>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1c3 0307 	rsb	r3, r3, #7
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d00b      	beq.n	8004fee <xPortStartScheduler+0xbe>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	60bb      	str	r3, [r7, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fee:	4b1e      	ldr	r3, [pc, #120]	@ (8005068 <xPortStartScheduler+0x138>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8005068 <xPortStartScheduler+0x138>)
 8004ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8005068 <xPortStartScheduler+0x138>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <xPortStartScheduler+0x138>)
 8005002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800500c:	4b17      	ldr	r3, [pc, #92]	@ (800506c <xPortStartScheduler+0x13c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a16      	ldr	r2, [pc, #88]	@ (800506c <xPortStartScheduler+0x13c>)
 8005012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005018:	4b14      	ldr	r3, [pc, #80]	@ (800506c <xPortStartScheduler+0x13c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a13      	ldr	r2, [pc, #76]	@ (800506c <xPortStartScheduler+0x13c>)
 800501e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005024:	f000 f8da 	bl	80051dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005028:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <xPortStartScheduler+0x140>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800502e:	f000 f8f9 	bl	8005224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005032:	4b10      	ldr	r3, [pc, #64]	@ (8005074 <xPortStartScheduler+0x144>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a0f      	ldr	r2, [pc, #60]	@ (8005074 <xPortStartScheduler+0x144>)
 8005038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800503c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800503e:	f7ff ff63 	bl	8004f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005042:	f7ff f873 	bl	800412c <vTaskSwitchContext>
	prvTaskExitError();
 8005046:	f7ff ff1d 	bl	8004e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	e000ed00 	.word	0xe000ed00
 8005058:	410fc271 	.word	0x410fc271
 800505c:	410fc270 	.word	0x410fc270
 8005060:	e000e400 	.word	0xe000e400
 8005064:	20000468 	.word	0x20000468
 8005068:	2000046c 	.word	0x2000046c
 800506c:	e000ed20 	.word	0xe000ed20
 8005070:	2000000c 	.word	0x2000000c
 8005074:	e000ef34 	.word	0xe000ef34

08005078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
}
 8005090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005092:	4b10      	ldr	r3, [pc, #64]	@ (80050d4 <vPortEnterCritical+0x5c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3301      	adds	r3, #1
 8005098:	4a0e      	ldr	r2, [pc, #56]	@ (80050d4 <vPortEnterCritical+0x5c>)
 800509a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800509c:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <vPortEnterCritical+0x5c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d110      	bne.n	80050c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050a4:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <vPortEnterCritical+0x60>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	603b      	str	r3, [r7, #0]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <vPortEnterCritical+0x4a>
	}
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050e2:	4b12      	ldr	r3, [pc, #72]	@ (800512c <vPortExitCritical+0x50>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <vPortExitCritical+0x26>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	607b      	str	r3, [r7, #4]
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	e7fd      	b.n	80050fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005102:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <vPortExitCritical+0x50>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3b01      	subs	r3, #1
 8005108:	4a08      	ldr	r2, [pc, #32]	@ (800512c <vPortExitCritical+0x50>)
 800510a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800510c:	4b07      	ldr	r3, [pc, #28]	@ (800512c <vPortExitCritical+0x50>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <vPortExitCritical+0x44>
 8005114:	2300      	movs	r3, #0
 8005116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f383 8811 	msr	BASEPRI, r3
}
 800511e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	2000000c 	.word	0x2000000c

08005130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005130:	f3ef 8009 	mrs	r0, PSP
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <pxCurrentTCBConst>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	f01e 0f10 	tst.w	lr, #16
 8005140:	bf08      	it	eq
 8005142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514a:	6010      	str	r0, [r2, #0]
 800514c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005154:	f380 8811 	msr	BASEPRI, r0
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f7fe ffe4 	bl	800412c <vTaskSwitchContext>
 8005164:	f04f 0000 	mov.w	r0, #0
 8005168:	f380 8811 	msr	BASEPRI, r0
 800516c:	bc09      	pop	{r0, r3}
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	6808      	ldr	r0, [r1, #0]
 8005172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005176:	f01e 0f10 	tst.w	lr, #16
 800517a:	bf08      	it	eq
 800517c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005180:	f380 8809 	msr	PSP, r0
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	f3af 8000 	nop.w

08005190 <pxCurrentTCBConst>:
 8005190:	20000328 	.word	0x20000328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop

08005198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	607b      	str	r3, [r7, #4]
}
 80051b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051b2:	f7fe ff01 	bl	8003fb8 <xTaskIncrementTick>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051bc:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <SysTick_Handler+0x40>)
 80051be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f383 8811 	msr	BASEPRI, r3
}
 80051ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <vPortSetupTimerInterrupt+0x34>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005214 <vPortSetupTimerInterrupt+0x38>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <vPortSetupTimerInterrupt+0x3c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0a      	ldr	r2, [pc, #40]	@ (800521c <vPortSetupTimerInterrupt+0x40>)
 80051f2:	fba2 2303 	umull	r2, r3, r2, r3
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	4a09      	ldr	r2, [pc, #36]	@ (8005220 <vPortSetupTimerInterrupt+0x44>)
 80051fa:	3b01      	subs	r3, #1
 80051fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051fe:	4b04      	ldr	r3, [pc, #16]	@ (8005210 <vPortSetupTimerInterrupt+0x34>)
 8005200:	2207      	movs	r2, #7
 8005202:	601a      	str	r2, [r3, #0]
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	e000e010 	.word	0xe000e010
 8005214:	e000e018 	.word	0xe000e018
 8005218:	20000000 	.word	0x20000000
 800521c:	10624dd3 	.word	0x10624dd3
 8005220:	e000e014 	.word	0xe000e014

08005224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005234 <vPortEnableVFP+0x10>
 8005228:	6801      	ldr	r1, [r0, #0]
 800522a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800522e:	6001      	str	r1, [r0, #0]
 8005230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005232:	bf00      	nop
 8005234:	e000ed88 	.word	0xe000ed88

08005238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800523e:	f3ef 8305 	mrs	r3, IPSR
 8005242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b0f      	cmp	r3, #15
 8005248:	d915      	bls.n	8005276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800524a:	4a18      	ldr	r2, [pc, #96]	@ (80052ac <vPortValidateInterruptPriority+0x74>)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005254:	4b16      	ldr	r3, [pc, #88]	@ (80052b0 <vPortValidateInterruptPriority+0x78>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	7afa      	ldrb	r2, [r7, #11]
 800525a:	429a      	cmp	r2, r3
 800525c:	d20b      	bcs.n	8005276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	e7fd      	b.n	8005272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005276:	4b0f      	ldr	r3, [pc, #60]	@ (80052b4 <vPortValidateInterruptPriority+0x7c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <vPortValidateInterruptPriority+0x80>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d90b      	bls.n	800529e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	603b      	str	r3, [r7, #0]
}
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	e7fd      	b.n	800529a <vPortValidateInterruptPriority+0x62>
	}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000e3f0 	.word	0xe000e3f0
 80052b0:	20000468 	.word	0x20000468
 80052b4:	e000ed0c 	.word	0xe000ed0c
 80052b8:	2000046c 	.word	0x2000046c

080052bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	@ 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052c8:	f7fe fdba 	bl	8003e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005438 <pvPortMalloc+0x17c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052d4:	f000 f916 	bl	8005504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052d8:	4b58      	ldr	r3, [pc, #352]	@ (800543c <pvPortMalloc+0x180>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 8090 	bne.w	8005406 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01e      	beq.n	800532a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052ec:	2208      	movs	r2, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4413      	add	r3, r2
 80052f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d015      	beq.n	800532a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f023 0307 	bic.w	r3, r3, #7
 8005304:	3308      	adds	r3, #8
 8005306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <pvPortMalloc+0x6e>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	617b      	str	r3, [r7, #20]
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	e7fd      	b.n	8005326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d06a      	beq.n	8005406 <pvPortMalloc+0x14a>
 8005330:	4b43      	ldr	r3, [pc, #268]	@ (8005440 <pvPortMalloc+0x184>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d865      	bhi.n	8005406 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800533a:	4b42      	ldr	r3, [pc, #264]	@ (8005444 <pvPortMalloc+0x188>)
 800533c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800533e:	4b41      	ldr	r3, [pc, #260]	@ (8005444 <pvPortMalloc+0x188>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005344:	e004      	b.n	8005350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d903      	bls.n	8005362 <pvPortMalloc+0xa6>
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f1      	bne.n	8005346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005362:	4b35      	ldr	r3, [pc, #212]	@ (8005438 <pvPortMalloc+0x17c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005368:	429a      	cmp	r2, r3
 800536a:	d04c      	beq.n	8005406 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2208      	movs	r2, #8
 8005372:	4413      	add	r3, r2
 8005374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	2308      	movs	r3, #8
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	429a      	cmp	r2, r3
 800538c:	d920      	bls.n	80053d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800538e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4413      	add	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <pvPortMalloc+0xfc>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	613b      	str	r3, [r7, #16]
}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	e7fd      	b.n	80053b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053ca:	69b8      	ldr	r0, [r7, #24]
 80053cc:	f000 f8fc 	bl	80055c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <pvPortMalloc+0x184>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <pvPortMalloc+0x184>)
 80053dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053de:	4b18      	ldr	r3, [pc, #96]	@ (8005440 <pvPortMalloc+0x184>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b19      	ldr	r3, [pc, #100]	@ (8005448 <pvPortMalloc+0x18c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d203      	bcs.n	80053f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053ea:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <pvPortMalloc+0x184>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <pvPortMalloc+0x18c>)
 80053f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4b11      	ldr	r3, [pc, #68]	@ (800543c <pvPortMalloc+0x180>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005406:	f7fe fd29 	bl	8003e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <pvPortMalloc+0x170>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <pvPortMalloc+0x16c>
	return pvReturn;
 800542c:	69fb      	ldr	r3, [r7, #28]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3728      	adds	r7, #40	@ 0x28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20013078 	.word	0x20013078
 800543c:	20013084 	.word	0x20013084
 8005440:	2001307c 	.word	0x2001307c
 8005444:	20013070 	.word	0x20013070
 8005448:	20013080 	.word	0x20013080

0800544c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d04a      	beq.n	80054f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800545e:	2308      	movs	r3, #8
 8005460:	425b      	negs	r3, r3
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b22      	ldr	r3, [pc, #136]	@ (80054fc <vPortFree+0xb0>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <vPortFree+0x46>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	60fb      	str	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	e7fd      	b.n	800548e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <vPortFree+0x66>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60bb      	str	r3, [r7, #8]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <vPortFree+0xb0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d115      	bne.n	80054f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b0b      	ldr	r3, [pc, #44]	@ (80054fc <vPortFree+0xb0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054d8:	f7fe fcb2 	bl	8003e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <vPortFree+0xb4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	4a06      	ldr	r2, [pc, #24]	@ (8005500 <vPortFree+0xb4>)
 80054e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ea:	6938      	ldr	r0, [r7, #16]
 80054ec:	f000 f86c 	bl	80055c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054f0:	f7fe fcb4 	bl	8003e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054f4:	bf00      	nop
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20013084 	.word	0x20013084
 8005500:	2001307c 	.word	0x2001307c

08005504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800550a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800550e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005510:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <prvHeapInit+0xac>)
 8005512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3307      	adds	r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <prvHeapInit+0xac>)
 8005534:	4413      	add	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800553c:	4a1d      	ldr	r2, [pc, #116]	@ (80055b4 <prvHeapInit+0xb0>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005542:	4b1c      	ldr	r3, [pc, #112]	@ (80055b4 <prvHeapInit+0xb0>)
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	4413      	add	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005550:	2208      	movs	r2, #8
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a15      	ldr	r2, [pc, #84]	@ (80055b8 <prvHeapInit+0xb4>)
 8005564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005566:	4b14      	ldr	r3, [pc, #80]	@ (80055b8 <prvHeapInit+0xb4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800556e:	4b12      	ldr	r3, [pc, #72]	@ (80055b8 <prvHeapInit+0xb4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <prvHeapInit+0xb4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <prvHeapInit+0xb8>)
 8005592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a09      	ldr	r2, [pc, #36]	@ (80055c0 <prvHeapInit+0xbc>)
 800559a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800559c:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <prvHeapInit+0xc0>)
 800559e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000470 	.word	0x20000470
 80055b4:	20013070 	.word	0x20013070
 80055b8:	20013078 	.word	0x20013078
 80055bc:	20013080 	.word	0x20013080
 80055c0:	2001307c 	.word	0x2001307c
 80055c4:	20013084 	.word	0x20013084

080055c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055d0:	4b28      	ldr	r3, [pc, #160]	@ (8005674 <prvInsertBlockIntoFreeList+0xac>)
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <prvInsertBlockIntoFreeList+0x14>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d8f7      	bhi.n	80055d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d108      	bne.n	800560a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d118      	bne.n	8005650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d00d      	beq.n	8005646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e008      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e003      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d002      	beq.n	8005666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20013070 	.word	0x20013070
 8005678:	20013078 	.word	0x20013078

0800567c <_vsniprintf_r>:
 800567c:	b530      	push	{r4, r5, lr}
 800567e:	4614      	mov	r4, r2
 8005680:	2c00      	cmp	r4, #0
 8005682:	b09b      	sub	sp, #108	@ 0x6c
 8005684:	4605      	mov	r5, r0
 8005686:	461a      	mov	r2, r3
 8005688:	da05      	bge.n	8005696 <_vsniprintf_r+0x1a>
 800568a:	238b      	movs	r3, #139	@ 0x8b
 800568c:	6003      	str	r3, [r0, #0]
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	b01b      	add	sp, #108	@ 0x6c
 8005694:	bd30      	pop	{r4, r5, pc}
 8005696:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800569a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800569e:	bf14      	ite	ne
 80056a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80056a4:	4623      	moveq	r3, r4
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	9305      	str	r3, [sp, #20]
 80056aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80056ae:	9100      	str	r1, [sp, #0]
 80056b0:	9104      	str	r1, [sp, #16]
 80056b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80056b6:	4669      	mov	r1, sp
 80056b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80056ba:	f000 f9d3 	bl	8005a64 <_svfiprintf_r>
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	bfbc      	itt	lt
 80056c2:	238b      	movlt	r3, #139	@ 0x8b
 80056c4:	602b      	strlt	r3, [r5, #0]
 80056c6:	2c00      	cmp	r4, #0
 80056c8:	d0e3      	beq.n	8005692 <_vsniprintf_r+0x16>
 80056ca:	9b00      	ldr	r3, [sp, #0]
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e7df      	b.n	8005692 <_vsniprintf_r+0x16>
	...

080056d4 <vsniprintf>:
 80056d4:	b507      	push	{r0, r1, r2, lr}
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	460a      	mov	r2, r1
 80056dc:	4601      	mov	r1, r0
 80056de:	4803      	ldr	r0, [pc, #12]	@ (80056ec <vsniprintf+0x18>)
 80056e0:	6800      	ldr	r0, [r0, #0]
 80056e2:	f7ff ffcb 	bl	800567c <_vsniprintf_r>
 80056e6:	b003      	add	sp, #12
 80056e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80056ec:	20000010 	.word	0x20000010

080056f0 <memset>:
 80056f0:	4402      	add	r2, r0
 80056f2:	4603      	mov	r3, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <strchr>:
 8005700:	b2c9      	uxtb	r1, r1
 8005702:	4603      	mov	r3, r0
 8005704:	4618      	mov	r0, r3
 8005706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800570a:	b112      	cbz	r2, 8005712 <strchr+0x12>
 800570c:	428a      	cmp	r2, r1
 800570e:	d1f9      	bne.n	8005704 <strchr+0x4>
 8005710:	4770      	bx	lr
 8005712:	2900      	cmp	r1, #0
 8005714:	bf18      	it	ne
 8005716:	2000      	movne	r0, #0
 8005718:	4770      	bx	lr

0800571a <strstr>:
 800571a:	780a      	ldrb	r2, [r1, #0]
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	b96a      	cbnz	r2, 800573c <strstr+0x22>
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	429a      	cmp	r2, r3
 8005724:	d109      	bne.n	800573a <strstr+0x20>
 8005726:	460c      	mov	r4, r1
 8005728:	4605      	mov	r5, r0
 800572a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f6      	beq.n	8005720 <strstr+0x6>
 8005732:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005736:	429e      	cmp	r6, r3
 8005738:	d0f7      	beq.n	800572a <strstr+0x10>
 800573a:	3001      	adds	r0, #1
 800573c:	7803      	ldrb	r3, [r0, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ef      	bne.n	8005722 <strstr+0x8>
 8005742:	4618      	mov	r0, r3
 8005744:	e7ec      	b.n	8005720 <strstr+0x6>
	...

08005748 <__errno>:
 8005748:	4b01      	ldr	r3, [pc, #4]	@ (8005750 <__errno+0x8>)
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000010 	.word	0x20000010

08005754 <__libc_init_array>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	4d0d      	ldr	r5, [pc, #52]	@ (800578c <__libc_init_array+0x38>)
 8005758:	4c0d      	ldr	r4, [pc, #52]	@ (8005790 <__libc_init_array+0x3c>)
 800575a:	1b64      	subs	r4, r4, r5
 800575c:	10a4      	asrs	r4, r4, #2
 800575e:	2600      	movs	r6, #0
 8005760:	42a6      	cmp	r6, r4
 8005762:	d109      	bne.n	8005778 <__libc_init_array+0x24>
 8005764:	4d0b      	ldr	r5, [pc, #44]	@ (8005794 <__libc_init_array+0x40>)
 8005766:	4c0c      	ldr	r4, [pc, #48]	@ (8005798 <__libc_init_array+0x44>)
 8005768:	f000 fc66 	bl	8006038 <_init>
 800576c:	1b64      	subs	r4, r4, r5
 800576e:	10a4      	asrs	r4, r4, #2
 8005770:	2600      	movs	r6, #0
 8005772:	42a6      	cmp	r6, r4
 8005774:	d105      	bne.n	8005782 <__libc_init_array+0x2e>
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	f855 3b04 	ldr.w	r3, [r5], #4
 800577c:	4798      	blx	r3
 800577e:	3601      	adds	r6, #1
 8005780:	e7ee      	b.n	8005760 <__libc_init_array+0xc>
 8005782:	f855 3b04 	ldr.w	r3, [r5], #4
 8005786:	4798      	blx	r3
 8005788:	3601      	adds	r6, #1
 800578a:	e7f2      	b.n	8005772 <__libc_init_array+0x1e>
 800578c:	08006220 	.word	0x08006220
 8005790:	08006220 	.word	0x08006220
 8005794:	08006220 	.word	0x08006220
 8005798:	08006224 	.word	0x08006224

0800579c <__retarget_lock_acquire_recursive>:
 800579c:	4770      	bx	lr

0800579e <__retarget_lock_release_recursive>:
 800579e:	4770      	bx	lr

080057a0 <memcpy>:
 80057a0:	440a      	add	r2, r1
 80057a2:	4291      	cmp	r1, r2
 80057a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057a8:	d100      	bne.n	80057ac <memcpy+0xc>
 80057aa:	4770      	bx	lr
 80057ac:	b510      	push	{r4, lr}
 80057ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057b6:	4291      	cmp	r1, r2
 80057b8:	d1f9      	bne.n	80057ae <memcpy+0xe>
 80057ba:	bd10      	pop	{r4, pc}

080057bc <_free_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4605      	mov	r5, r0
 80057c0:	2900      	cmp	r1, #0
 80057c2:	d041      	beq.n	8005848 <_free_r+0x8c>
 80057c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c8:	1f0c      	subs	r4, r1, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfb8      	it	lt
 80057ce:	18e4      	addlt	r4, r4, r3
 80057d0:	f000 f8e0 	bl	8005994 <__malloc_lock>
 80057d4:	4a1d      	ldr	r2, [pc, #116]	@ (800584c <_free_r+0x90>)
 80057d6:	6813      	ldr	r3, [r2, #0]
 80057d8:	b933      	cbnz	r3, 80057e8 <_free_r+0x2c>
 80057da:	6063      	str	r3, [r4, #4]
 80057dc:	6014      	str	r4, [r2, #0]
 80057de:	4628      	mov	r0, r5
 80057e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e4:	f000 b8dc 	b.w	80059a0 <__malloc_unlock>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d908      	bls.n	80057fe <_free_r+0x42>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	1821      	adds	r1, r4, r0
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf01      	itttt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	1809      	addeq	r1, r1, r0
 80057fa:	6021      	streq	r1, [r4, #0]
 80057fc:	e7ed      	b.n	80057da <_free_r+0x1e>
 80057fe:	461a      	mov	r2, r3
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b10b      	cbz	r3, 8005808 <_free_r+0x4c>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d9fa      	bls.n	80057fe <_free_r+0x42>
 8005808:	6811      	ldr	r1, [r2, #0]
 800580a:	1850      	adds	r0, r2, r1
 800580c:	42a0      	cmp	r0, r4
 800580e:	d10b      	bne.n	8005828 <_free_r+0x6c>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	4401      	add	r1, r0
 8005814:	1850      	adds	r0, r2, r1
 8005816:	4283      	cmp	r3, r0
 8005818:	6011      	str	r1, [r2, #0]
 800581a:	d1e0      	bne.n	80057de <_free_r+0x22>
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	6053      	str	r3, [r2, #4]
 8005822:	4408      	add	r0, r1
 8005824:	6010      	str	r0, [r2, #0]
 8005826:	e7da      	b.n	80057de <_free_r+0x22>
 8005828:	d902      	bls.n	8005830 <_free_r+0x74>
 800582a:	230c      	movs	r3, #12
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	e7d6      	b.n	80057de <_free_r+0x22>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	1821      	adds	r1, r4, r0
 8005834:	428b      	cmp	r3, r1
 8005836:	bf04      	itt	eq
 8005838:	6819      	ldreq	r1, [r3, #0]
 800583a:	685b      	ldreq	r3, [r3, #4]
 800583c:	6063      	str	r3, [r4, #4]
 800583e:	bf04      	itt	eq
 8005840:	1809      	addeq	r1, r1, r0
 8005842:	6021      	streq	r1, [r4, #0]
 8005844:	6054      	str	r4, [r2, #4]
 8005846:	e7ca      	b.n	80057de <_free_r+0x22>
 8005848:	bd38      	pop	{r3, r4, r5, pc}
 800584a:	bf00      	nop
 800584c:	200131cc 	.word	0x200131cc

08005850 <sbrk_aligned>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4e0f      	ldr	r6, [pc, #60]	@ (8005890 <sbrk_aligned+0x40>)
 8005854:	460c      	mov	r4, r1
 8005856:	6831      	ldr	r1, [r6, #0]
 8005858:	4605      	mov	r5, r0
 800585a:	b911      	cbnz	r1, 8005862 <sbrk_aligned+0x12>
 800585c:	f000 fba6 	bl	8005fac <_sbrk_r>
 8005860:	6030      	str	r0, [r6, #0]
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f000 fba1 	bl	8005fac <_sbrk_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	d103      	bne.n	8005876 <sbrk_aligned+0x26>
 800586e:	f04f 34ff 	mov.w	r4, #4294967295
 8005872:	4620      	mov	r0, r4
 8005874:	bd70      	pop	{r4, r5, r6, pc}
 8005876:	1cc4      	adds	r4, r0, #3
 8005878:	f024 0403 	bic.w	r4, r4, #3
 800587c:	42a0      	cmp	r0, r4
 800587e:	d0f8      	beq.n	8005872 <sbrk_aligned+0x22>
 8005880:	1a21      	subs	r1, r4, r0
 8005882:	4628      	mov	r0, r5
 8005884:	f000 fb92 	bl	8005fac <_sbrk_r>
 8005888:	3001      	adds	r0, #1
 800588a:	d1f2      	bne.n	8005872 <sbrk_aligned+0x22>
 800588c:	e7ef      	b.n	800586e <sbrk_aligned+0x1e>
 800588e:	bf00      	nop
 8005890:	200131c8 	.word	0x200131c8

08005894 <_malloc_r>:
 8005894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005898:	1ccd      	adds	r5, r1, #3
 800589a:	f025 0503 	bic.w	r5, r5, #3
 800589e:	3508      	adds	r5, #8
 80058a0:	2d0c      	cmp	r5, #12
 80058a2:	bf38      	it	cc
 80058a4:	250c      	movcc	r5, #12
 80058a6:	2d00      	cmp	r5, #0
 80058a8:	4606      	mov	r6, r0
 80058aa:	db01      	blt.n	80058b0 <_malloc_r+0x1c>
 80058ac:	42a9      	cmp	r1, r5
 80058ae:	d904      	bls.n	80058ba <_malloc_r+0x26>
 80058b0:	230c      	movs	r3, #12
 80058b2:	6033      	str	r3, [r6, #0]
 80058b4:	2000      	movs	r0, #0
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005990 <_malloc_r+0xfc>
 80058be:	f000 f869 	bl	8005994 <__malloc_lock>
 80058c2:	f8d8 3000 	ldr.w	r3, [r8]
 80058c6:	461c      	mov	r4, r3
 80058c8:	bb44      	cbnz	r4, 800591c <_malloc_r+0x88>
 80058ca:	4629      	mov	r1, r5
 80058cc:	4630      	mov	r0, r6
 80058ce:	f7ff ffbf 	bl	8005850 <sbrk_aligned>
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	4604      	mov	r4, r0
 80058d6:	d158      	bne.n	800598a <_malloc_r+0xf6>
 80058d8:	f8d8 4000 	ldr.w	r4, [r8]
 80058dc:	4627      	mov	r7, r4
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d143      	bne.n	800596a <_malloc_r+0xd6>
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	d04b      	beq.n	800597e <_malloc_r+0xea>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	4639      	mov	r1, r7
 80058ea:	4630      	mov	r0, r6
 80058ec:	eb04 0903 	add.w	r9, r4, r3
 80058f0:	f000 fb5c 	bl	8005fac <_sbrk_r>
 80058f4:	4581      	cmp	r9, r0
 80058f6:	d142      	bne.n	800597e <_malloc_r+0xea>
 80058f8:	6821      	ldr	r1, [r4, #0]
 80058fa:	1a6d      	subs	r5, r5, r1
 80058fc:	4629      	mov	r1, r5
 80058fe:	4630      	mov	r0, r6
 8005900:	f7ff ffa6 	bl	8005850 <sbrk_aligned>
 8005904:	3001      	adds	r0, #1
 8005906:	d03a      	beq.n	800597e <_malloc_r+0xea>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	442b      	add	r3, r5
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	f8d8 3000 	ldr.w	r3, [r8]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	bb62      	cbnz	r2, 8005970 <_malloc_r+0xdc>
 8005916:	f8c8 7000 	str.w	r7, [r8]
 800591a:	e00f      	b.n	800593c <_malloc_r+0xa8>
 800591c:	6822      	ldr	r2, [r4, #0]
 800591e:	1b52      	subs	r2, r2, r5
 8005920:	d420      	bmi.n	8005964 <_malloc_r+0xd0>
 8005922:	2a0b      	cmp	r2, #11
 8005924:	d917      	bls.n	8005956 <_malloc_r+0xc2>
 8005926:	1961      	adds	r1, r4, r5
 8005928:	42a3      	cmp	r3, r4
 800592a:	6025      	str	r5, [r4, #0]
 800592c:	bf18      	it	ne
 800592e:	6059      	strne	r1, [r3, #4]
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	bf08      	it	eq
 8005934:	f8c8 1000 	streq.w	r1, [r8]
 8005938:	5162      	str	r2, [r4, r5]
 800593a:	604b      	str	r3, [r1, #4]
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f82f 	bl	80059a0 <__malloc_unlock>
 8005942:	f104 000b 	add.w	r0, r4, #11
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	f020 0007 	bic.w	r0, r0, #7
 800594c:	1ac2      	subs	r2, r0, r3
 800594e:	bf1c      	itt	ne
 8005950:	1a1b      	subne	r3, r3, r0
 8005952:	50a3      	strne	r3, [r4, r2]
 8005954:	e7af      	b.n	80058b6 <_malloc_r+0x22>
 8005956:	6862      	ldr	r2, [r4, #4]
 8005958:	42a3      	cmp	r3, r4
 800595a:	bf0c      	ite	eq
 800595c:	f8c8 2000 	streq.w	r2, [r8]
 8005960:	605a      	strne	r2, [r3, #4]
 8005962:	e7eb      	b.n	800593c <_malloc_r+0xa8>
 8005964:	4623      	mov	r3, r4
 8005966:	6864      	ldr	r4, [r4, #4]
 8005968:	e7ae      	b.n	80058c8 <_malloc_r+0x34>
 800596a:	463c      	mov	r4, r7
 800596c:	687f      	ldr	r7, [r7, #4]
 800596e:	e7b6      	b.n	80058de <_malloc_r+0x4a>
 8005970:	461a      	mov	r2, r3
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	42a3      	cmp	r3, r4
 8005976:	d1fb      	bne.n	8005970 <_malloc_r+0xdc>
 8005978:	2300      	movs	r3, #0
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	e7de      	b.n	800593c <_malloc_r+0xa8>
 800597e:	230c      	movs	r3, #12
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	4630      	mov	r0, r6
 8005984:	f000 f80c 	bl	80059a0 <__malloc_unlock>
 8005988:	e794      	b.n	80058b4 <_malloc_r+0x20>
 800598a:	6005      	str	r5, [r0, #0]
 800598c:	e7d6      	b.n	800593c <_malloc_r+0xa8>
 800598e:	bf00      	nop
 8005990:	200131cc 	.word	0x200131cc

08005994 <__malloc_lock>:
 8005994:	4801      	ldr	r0, [pc, #4]	@ (800599c <__malloc_lock+0x8>)
 8005996:	f7ff bf01 	b.w	800579c <__retarget_lock_acquire_recursive>
 800599a:	bf00      	nop
 800599c:	200131c4 	.word	0x200131c4

080059a0 <__malloc_unlock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	@ (80059a8 <__malloc_unlock+0x8>)
 80059a2:	f7ff befc 	b.w	800579e <__retarget_lock_release_recursive>
 80059a6:	bf00      	nop
 80059a8:	200131c4 	.word	0x200131c4

080059ac <__ssputs_r>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	688e      	ldr	r6, [r1, #8]
 80059b2:	461f      	mov	r7, r3
 80059b4:	42be      	cmp	r6, r7
 80059b6:	680b      	ldr	r3, [r1, #0]
 80059b8:	4682      	mov	sl, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	4690      	mov	r8, r2
 80059be:	d82d      	bhi.n	8005a1c <__ssputs_r+0x70>
 80059c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059c8:	d026      	beq.n	8005a18 <__ssputs_r+0x6c>
 80059ca:	6965      	ldr	r5, [r4, #20]
 80059cc:	6909      	ldr	r1, [r1, #16]
 80059ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059d2:	eba3 0901 	sub.w	r9, r3, r1
 80059d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059da:	1c7b      	adds	r3, r7, #1
 80059dc:	444b      	add	r3, r9
 80059de:	106d      	asrs	r5, r5, #1
 80059e0:	429d      	cmp	r5, r3
 80059e2:	bf38      	it	cc
 80059e4:	461d      	movcc	r5, r3
 80059e6:	0553      	lsls	r3, r2, #21
 80059e8:	d527      	bpl.n	8005a3a <__ssputs_r+0x8e>
 80059ea:	4629      	mov	r1, r5
 80059ec:	f7ff ff52 	bl	8005894 <_malloc_r>
 80059f0:	4606      	mov	r6, r0
 80059f2:	b360      	cbz	r0, 8005a4e <__ssputs_r+0xa2>
 80059f4:	6921      	ldr	r1, [r4, #16]
 80059f6:	464a      	mov	r2, r9
 80059f8:	f7ff fed2 	bl	80057a0 <memcpy>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	6126      	str	r6, [r4, #16]
 8005a0a:	6165      	str	r5, [r4, #20]
 8005a0c:	444e      	add	r6, r9
 8005a0e:	eba5 0509 	sub.w	r5, r5, r9
 8005a12:	6026      	str	r6, [r4, #0]
 8005a14:	60a5      	str	r5, [r4, #8]
 8005a16:	463e      	mov	r6, r7
 8005a18:	42be      	cmp	r6, r7
 8005a1a:	d900      	bls.n	8005a1e <__ssputs_r+0x72>
 8005a1c:	463e      	mov	r6, r7
 8005a1e:	6820      	ldr	r0, [r4, #0]
 8005a20:	4632      	mov	r2, r6
 8005a22:	4641      	mov	r1, r8
 8005a24:	f000 faa8 	bl	8005f78 <memmove>
 8005a28:	68a3      	ldr	r3, [r4, #8]
 8005a2a:	1b9b      	subs	r3, r3, r6
 8005a2c:	60a3      	str	r3, [r4, #8]
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	4433      	add	r3, r6
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	2000      	movs	r0, #0
 8005a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	f000 fac6 	bl	8005fcc <_realloc_r>
 8005a40:	4606      	mov	r6, r0
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d1e0      	bne.n	8005a08 <__ssputs_r+0x5c>
 8005a46:	6921      	ldr	r1, [r4, #16]
 8005a48:	4650      	mov	r0, sl
 8005a4a:	f7ff feb7 	bl	80057bc <_free_r>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	f8ca 3000 	str.w	r3, [sl]
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e7e9      	b.n	8005a36 <__ssputs_r+0x8a>
	...

08005a64 <_svfiprintf_r>:
 8005a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	4698      	mov	r8, r3
 8005a6a:	898b      	ldrh	r3, [r1, #12]
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	b09d      	sub	sp, #116	@ 0x74
 8005a70:	4607      	mov	r7, r0
 8005a72:	460d      	mov	r5, r1
 8005a74:	4614      	mov	r4, r2
 8005a76:	d510      	bpl.n	8005a9a <_svfiprintf_r+0x36>
 8005a78:	690b      	ldr	r3, [r1, #16]
 8005a7a:	b973      	cbnz	r3, 8005a9a <_svfiprintf_r+0x36>
 8005a7c:	2140      	movs	r1, #64	@ 0x40
 8005a7e:	f7ff ff09 	bl	8005894 <_malloc_r>
 8005a82:	6028      	str	r0, [r5, #0]
 8005a84:	6128      	str	r0, [r5, #16]
 8005a86:	b930      	cbnz	r0, 8005a96 <_svfiprintf_r+0x32>
 8005a88:	230c      	movs	r3, #12
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b01d      	add	sp, #116	@ 0x74
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	2340      	movs	r3, #64	@ 0x40
 8005a98:	616b      	str	r3, [r5, #20]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a9e:	2320      	movs	r3, #32
 8005aa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa8:	2330      	movs	r3, #48	@ 0x30
 8005aaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c48 <_svfiprintf_r+0x1e4>
 8005aae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ab2:	f04f 0901 	mov.w	r9, #1
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	469a      	mov	sl, r3
 8005aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005abe:	b10a      	cbz	r2, 8005ac4 <_svfiprintf_r+0x60>
 8005ac0:	2a25      	cmp	r2, #37	@ 0x25
 8005ac2:	d1f9      	bne.n	8005ab8 <_svfiprintf_r+0x54>
 8005ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac8:	d00b      	beq.n	8005ae2 <_svfiprintf_r+0x7e>
 8005aca:	465b      	mov	r3, fp
 8005acc:	4622      	mov	r2, r4
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff ff6b 	bl	80059ac <__ssputs_r>
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f000 80a7 	beq.w	8005c2a <_svfiprintf_r+0x1c6>
 8005adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ade:	445a      	add	r2, fp
 8005ae0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 809f 	beq.w	8005c2a <_svfiprintf_r+0x1c6>
 8005aec:	2300      	movs	r3, #0
 8005aee:	f04f 32ff 	mov.w	r2, #4294967295
 8005af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af6:	f10a 0a01 	add.w	sl, sl, #1
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	9307      	str	r3, [sp, #28]
 8005afe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b02:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b04:	4654      	mov	r4, sl
 8005b06:	2205      	movs	r2, #5
 8005b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0c:	484e      	ldr	r0, [pc, #312]	@ (8005c48 <_svfiprintf_r+0x1e4>)
 8005b0e:	f7fa fb67 	bl	80001e0 <memchr>
 8005b12:	9a04      	ldr	r2, [sp, #16]
 8005b14:	b9d8      	cbnz	r0, 8005b4e <_svfiprintf_r+0xea>
 8005b16:	06d0      	lsls	r0, r2, #27
 8005b18:	bf44      	itt	mi
 8005b1a:	2320      	movmi	r3, #32
 8005b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b20:	0711      	lsls	r1, r2, #28
 8005b22:	bf44      	itt	mi
 8005b24:	232b      	movmi	r3, #43	@ 0x2b
 8005b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b30:	d015      	beq.n	8005b5e <_svfiprintf_r+0xfa>
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	4654      	mov	r4, sl
 8005b36:	2000      	movs	r0, #0
 8005b38:	f04f 0c0a 	mov.w	ip, #10
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b42:	3b30      	subs	r3, #48	@ 0x30
 8005b44:	2b09      	cmp	r3, #9
 8005b46:	d94b      	bls.n	8005be0 <_svfiprintf_r+0x17c>
 8005b48:	b1b0      	cbz	r0, 8005b78 <_svfiprintf_r+0x114>
 8005b4a:	9207      	str	r2, [sp, #28]
 8005b4c:	e014      	b.n	8005b78 <_svfiprintf_r+0x114>
 8005b4e:	eba0 0308 	sub.w	r3, r0, r8
 8005b52:	fa09 f303 	lsl.w	r3, r9, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	46a2      	mov	sl, r4
 8005b5c:	e7d2      	b.n	8005b04 <_svfiprintf_r+0xa0>
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	1d19      	adds	r1, r3, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	9103      	str	r1, [sp, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfbb      	ittet	lt
 8005b6a:	425b      	neglt	r3, r3
 8005b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b70:	9307      	strge	r3, [sp, #28]
 8005b72:	9307      	strlt	r3, [sp, #28]
 8005b74:	bfb8      	it	lt
 8005b76:	9204      	strlt	r2, [sp, #16]
 8005b78:	7823      	ldrb	r3, [r4, #0]
 8005b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b7c:	d10a      	bne.n	8005b94 <_svfiprintf_r+0x130>
 8005b7e:	7863      	ldrb	r3, [r4, #1]
 8005b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b82:	d132      	bne.n	8005bea <_svfiprintf_r+0x186>
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	1d1a      	adds	r2, r3, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	9203      	str	r2, [sp, #12]
 8005b8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b90:	3402      	adds	r4, #2
 8005b92:	9305      	str	r3, [sp, #20]
 8005b94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c58 <_svfiprintf_r+0x1f4>
 8005b98:	7821      	ldrb	r1, [r4, #0]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	4650      	mov	r0, sl
 8005b9e:	f7fa fb1f 	bl	80001e0 <memchr>
 8005ba2:	b138      	cbz	r0, 8005bb4 <_svfiprintf_r+0x150>
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	eba0 000a 	sub.w	r0, r0, sl
 8005baa:	2240      	movs	r2, #64	@ 0x40
 8005bac:	4082      	lsls	r2, r0
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	3401      	adds	r4, #1
 8005bb2:	9304      	str	r3, [sp, #16]
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	4824      	ldr	r0, [pc, #144]	@ (8005c4c <_svfiprintf_r+0x1e8>)
 8005bba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bbe:	2206      	movs	r2, #6
 8005bc0:	f7fa fb0e 	bl	80001e0 <memchr>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d036      	beq.n	8005c36 <_svfiprintf_r+0x1d2>
 8005bc8:	4b21      	ldr	r3, [pc, #132]	@ (8005c50 <_svfiprintf_r+0x1ec>)
 8005bca:	bb1b      	cbnz	r3, 8005c14 <_svfiprintf_r+0x1b0>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	3307      	adds	r3, #7
 8005bd0:	f023 0307 	bic.w	r3, r3, #7
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bda:	4433      	add	r3, r6
 8005bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bde:	e76a      	b.n	8005ab6 <_svfiprintf_r+0x52>
 8005be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be4:	460c      	mov	r4, r1
 8005be6:	2001      	movs	r0, #1
 8005be8:	e7a8      	b.n	8005b3c <_svfiprintf_r+0xd8>
 8005bea:	2300      	movs	r3, #0
 8005bec:	3401      	adds	r4, #1
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f04f 0c0a 	mov.w	ip, #10
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfc:	3a30      	subs	r2, #48	@ 0x30
 8005bfe:	2a09      	cmp	r2, #9
 8005c00:	d903      	bls.n	8005c0a <_svfiprintf_r+0x1a6>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0c6      	beq.n	8005b94 <_svfiprintf_r+0x130>
 8005c06:	9105      	str	r1, [sp, #20]
 8005c08:	e7c4      	b.n	8005b94 <_svfiprintf_r+0x130>
 8005c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c0e:	4604      	mov	r4, r0
 8005c10:	2301      	movs	r3, #1
 8005c12:	e7f0      	b.n	8005bf6 <_svfiprintf_r+0x192>
 8005c14:	ab03      	add	r3, sp, #12
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	462a      	mov	r2, r5
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c54 <_svfiprintf_r+0x1f0>)
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	4638      	mov	r0, r7
 8005c20:	f3af 8000 	nop.w
 8005c24:	1c42      	adds	r2, r0, #1
 8005c26:	4606      	mov	r6, r0
 8005c28:	d1d6      	bne.n	8005bd8 <_svfiprintf_r+0x174>
 8005c2a:	89ab      	ldrh	r3, [r5, #12]
 8005c2c:	065b      	lsls	r3, r3, #25
 8005c2e:	f53f af2d 	bmi.w	8005a8c <_svfiprintf_r+0x28>
 8005c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c34:	e72c      	b.n	8005a90 <_svfiprintf_r+0x2c>
 8005c36:	ab03      	add	r3, sp, #12
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <_svfiprintf_r+0x1f0>)
 8005c3e:	a904      	add	r1, sp, #16
 8005c40:	4638      	mov	r0, r7
 8005c42:	f000 f879 	bl	8005d38 <_printf_i>
 8005c46:	e7ed      	b.n	8005c24 <_svfiprintf_r+0x1c0>
 8005c48:	080061e4 	.word	0x080061e4
 8005c4c:	080061ee 	.word	0x080061ee
 8005c50:	00000000 	.word	0x00000000
 8005c54:	080059ad 	.word	0x080059ad
 8005c58:	080061ea 	.word	0x080061ea

08005c5c <_printf_common>:
 8005c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	4616      	mov	r6, r2
 8005c62:	4698      	mov	r8, r3
 8005c64:	688a      	ldr	r2, [r1, #8]
 8005c66:	690b      	ldr	r3, [r1, #16]
 8005c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	bfb8      	it	lt
 8005c70:	4613      	movlt	r3, r2
 8005c72:	6033      	str	r3, [r6, #0]
 8005c74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c78:	4607      	mov	r7, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b10a      	cbz	r2, 8005c82 <_printf_common+0x26>
 8005c7e:	3301      	adds	r3, #1
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	6833      	ldrmi	r3, [r6, #0]
 8005c8a:	3302      	addmi	r3, #2
 8005c8c:	6033      	strmi	r3, [r6, #0]
 8005c8e:	6825      	ldr	r5, [r4, #0]
 8005c90:	f015 0506 	ands.w	r5, r5, #6
 8005c94:	d106      	bne.n	8005ca4 <_printf_common+0x48>
 8005c96:	f104 0a19 	add.w	sl, r4, #25
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	6832      	ldr	r2, [r6, #0]
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dc26      	bgt.n	8005cf2 <_printf_common+0x96>
 8005ca4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	3b00      	subs	r3, #0
 8005cac:	bf18      	it	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	0692      	lsls	r2, r2, #26
 8005cb2:	d42b      	bmi.n	8005d0c <_printf_common+0xb0>
 8005cb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cb8:	4641      	mov	r1, r8
 8005cba:	4638      	mov	r0, r7
 8005cbc:	47c8      	blx	r9
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d01e      	beq.n	8005d00 <_printf_common+0xa4>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	f003 0306 	and.w	r3, r3, #6
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	bf02      	ittt	eq
 8005cce:	68e5      	ldreq	r5, [r4, #12]
 8005cd0:	6833      	ldreq	r3, [r6, #0]
 8005cd2:	1aed      	subeq	r5, r5, r3
 8005cd4:	68a3      	ldr	r3, [r4, #8]
 8005cd6:	bf0c      	ite	eq
 8005cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cdc:	2500      	movne	r5, #0
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	bfc4      	itt	gt
 8005ce2:	1a9b      	subgt	r3, r3, r2
 8005ce4:	18ed      	addgt	r5, r5, r3
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	341a      	adds	r4, #26
 8005cea:	42b5      	cmp	r5, r6
 8005cec:	d11a      	bne.n	8005d24 <_printf_common+0xc8>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e008      	b.n	8005d04 <_printf_common+0xa8>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	47c8      	blx	r9
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d103      	bne.n	8005d08 <_printf_common+0xac>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d08:	3501      	adds	r5, #1
 8005d0a:	e7c6      	b.n	8005c9a <_printf_common+0x3e>
 8005d0c:	18e1      	adds	r1, r4, r3
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	2030      	movs	r0, #48	@ 0x30
 8005d12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d16:	4422      	add	r2, r4
 8005d18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d20:	3302      	adds	r3, #2
 8005d22:	e7c7      	b.n	8005cb4 <_printf_common+0x58>
 8005d24:	2301      	movs	r3, #1
 8005d26:	4622      	mov	r2, r4
 8005d28:	4641      	mov	r1, r8
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	47c8      	blx	r9
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d0e6      	beq.n	8005d00 <_printf_common+0xa4>
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7d9      	b.n	8005cea <_printf_common+0x8e>
	...

08005d38 <_printf_i>:
 8005d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	7e0f      	ldrb	r7, [r1, #24]
 8005d3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d40:	2f78      	cmp	r7, #120	@ 0x78
 8005d42:	4691      	mov	r9, r2
 8005d44:	4680      	mov	r8, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	469a      	mov	sl, r3
 8005d4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d4e:	d807      	bhi.n	8005d60 <_printf_i+0x28>
 8005d50:	2f62      	cmp	r7, #98	@ 0x62
 8005d52:	d80a      	bhi.n	8005d6a <_printf_i+0x32>
 8005d54:	2f00      	cmp	r7, #0
 8005d56:	f000 80d2 	beq.w	8005efe <_printf_i+0x1c6>
 8005d5a:	2f58      	cmp	r7, #88	@ 0x58
 8005d5c:	f000 80b9 	beq.w	8005ed2 <_printf_i+0x19a>
 8005d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d68:	e03a      	b.n	8005de0 <_printf_i+0xa8>
 8005d6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d6e:	2b15      	cmp	r3, #21
 8005d70:	d8f6      	bhi.n	8005d60 <_printf_i+0x28>
 8005d72:	a101      	add	r1, pc, #4	@ (adr r1, 8005d78 <_printf_i+0x40>)
 8005d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005de5 	.word	0x08005de5
 8005d80:	08005d61 	.word	0x08005d61
 8005d84:	08005d61 	.word	0x08005d61
 8005d88:	08005d61 	.word	0x08005d61
 8005d8c:	08005d61 	.word	0x08005d61
 8005d90:	08005de5 	.word	0x08005de5
 8005d94:	08005d61 	.word	0x08005d61
 8005d98:	08005d61 	.word	0x08005d61
 8005d9c:	08005d61 	.word	0x08005d61
 8005da0:	08005d61 	.word	0x08005d61
 8005da4:	08005ee5 	.word	0x08005ee5
 8005da8:	08005e0f 	.word	0x08005e0f
 8005dac:	08005e9f 	.word	0x08005e9f
 8005db0:	08005d61 	.word	0x08005d61
 8005db4:	08005d61 	.word	0x08005d61
 8005db8:	08005f07 	.word	0x08005f07
 8005dbc:	08005d61 	.word	0x08005d61
 8005dc0:	08005e0f 	.word	0x08005e0f
 8005dc4:	08005d61 	.word	0x08005d61
 8005dc8:	08005d61 	.word	0x08005d61
 8005dcc:	08005ea7 	.word	0x08005ea7
 8005dd0:	6833      	ldr	r3, [r6, #0]
 8005dd2:	1d1a      	adds	r2, r3, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6032      	str	r2, [r6, #0]
 8005dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005de0:	2301      	movs	r3, #1
 8005de2:	e09d      	b.n	8005f20 <_printf_i+0x1e8>
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	1d19      	adds	r1, r3, #4
 8005dea:	6031      	str	r1, [r6, #0]
 8005dec:	0606      	lsls	r6, r0, #24
 8005dee:	d501      	bpl.n	8005df4 <_printf_i+0xbc>
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	e003      	b.n	8005dfc <_printf_i+0xc4>
 8005df4:	0645      	lsls	r5, r0, #25
 8005df6:	d5fb      	bpl.n	8005df0 <_printf_i+0xb8>
 8005df8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dfc:	2d00      	cmp	r5, #0
 8005dfe:	da03      	bge.n	8005e08 <_printf_i+0xd0>
 8005e00:	232d      	movs	r3, #45	@ 0x2d
 8005e02:	426d      	negs	r5, r5
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e08:	4859      	ldr	r0, [pc, #356]	@ (8005f70 <_printf_i+0x238>)
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	e011      	b.n	8005e32 <_printf_i+0xfa>
 8005e0e:	6821      	ldr	r1, [r4, #0]
 8005e10:	6833      	ldr	r3, [r6, #0]
 8005e12:	0608      	lsls	r0, r1, #24
 8005e14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e18:	d402      	bmi.n	8005e20 <_printf_i+0xe8>
 8005e1a:	0649      	lsls	r1, r1, #25
 8005e1c:	bf48      	it	mi
 8005e1e:	b2ad      	uxthmi	r5, r5
 8005e20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e22:	4853      	ldr	r0, [pc, #332]	@ (8005f70 <_printf_i+0x238>)
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	bf14      	ite	ne
 8005e28:	230a      	movne	r3, #10
 8005e2a:	2308      	moveq	r3, #8
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e32:	6866      	ldr	r6, [r4, #4]
 8005e34:	60a6      	str	r6, [r4, #8]
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	bfa2      	ittt	ge
 8005e3a:	6821      	ldrge	r1, [r4, #0]
 8005e3c:	f021 0104 	bicge.w	r1, r1, #4
 8005e40:	6021      	strge	r1, [r4, #0]
 8005e42:	b90d      	cbnz	r5, 8005e48 <_printf_i+0x110>
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	d04b      	beq.n	8005ee0 <_printf_i+0x1a8>
 8005e48:	4616      	mov	r6, r2
 8005e4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e4e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e52:	5dc7      	ldrb	r7, [r0, r7]
 8005e54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e58:	462f      	mov	r7, r5
 8005e5a:	42bb      	cmp	r3, r7
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	d9f4      	bls.n	8005e4a <_printf_i+0x112>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d10b      	bne.n	8005e7c <_printf_i+0x144>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07df      	lsls	r7, r3, #31
 8005e68:	d508      	bpl.n	8005e7c <_printf_i+0x144>
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	bfde      	ittt	le
 8005e72:	2330      	movle	r3, #48	@ 0x30
 8005e74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e7c:	1b92      	subs	r2, r2, r6
 8005e7e:	6122      	str	r2, [r4, #16]
 8005e80:	f8cd a000 	str.w	sl, [sp]
 8005e84:	464b      	mov	r3, r9
 8005e86:	aa03      	add	r2, sp, #12
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f7ff fee6 	bl	8005c5c <_printf_common>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d14a      	bne.n	8005f2a <_printf_i+0x1f2>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b004      	add	sp, #16
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	f043 0320 	orr.w	r3, r3, #32
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	4833      	ldr	r0, [pc, #204]	@ (8005f74 <_printf_i+0x23c>)
 8005ea8:	2778      	movs	r7, #120	@ 0x78
 8005eaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6831      	ldr	r1, [r6, #0]
 8005eb2:	061f      	lsls	r7, r3, #24
 8005eb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eb8:	d402      	bmi.n	8005ec0 <_printf_i+0x188>
 8005eba:	065f      	lsls	r7, r3, #25
 8005ebc:	bf48      	it	mi
 8005ebe:	b2ad      	uxthmi	r5, r5
 8005ec0:	6031      	str	r1, [r6, #0]
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	bf44      	itt	mi
 8005ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eca:	6023      	strmi	r3, [r4, #0]
 8005ecc:	b11d      	cbz	r5, 8005ed6 <_printf_i+0x19e>
 8005ece:	2310      	movs	r3, #16
 8005ed0:	e7ac      	b.n	8005e2c <_printf_i+0xf4>
 8005ed2:	4827      	ldr	r0, [pc, #156]	@ (8005f70 <_printf_i+0x238>)
 8005ed4:	e7e9      	b.n	8005eaa <_printf_i+0x172>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	f023 0320 	bic.w	r3, r3, #32
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	e7f6      	b.n	8005ece <_printf_i+0x196>
 8005ee0:	4616      	mov	r6, r2
 8005ee2:	e7bd      	b.n	8005e60 <_printf_i+0x128>
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	6961      	ldr	r1, [r4, #20]
 8005eea:	1d18      	adds	r0, r3, #4
 8005eec:	6030      	str	r0, [r6, #0]
 8005eee:	062e      	lsls	r6, r5, #24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	d501      	bpl.n	8005ef8 <_printf_i+0x1c0>
 8005ef4:	6019      	str	r1, [r3, #0]
 8005ef6:	e002      	b.n	8005efe <_printf_i+0x1c6>
 8005ef8:	0668      	lsls	r0, r5, #25
 8005efa:	d5fb      	bpl.n	8005ef4 <_printf_i+0x1bc>
 8005efc:	8019      	strh	r1, [r3, #0]
 8005efe:	2300      	movs	r3, #0
 8005f00:	6123      	str	r3, [r4, #16]
 8005f02:	4616      	mov	r6, r2
 8005f04:	e7bc      	b.n	8005e80 <_printf_i+0x148>
 8005f06:	6833      	ldr	r3, [r6, #0]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	6032      	str	r2, [r6, #0]
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7fa f964 	bl	80001e0 <memchr>
 8005f18:	b108      	cbz	r0, 8005f1e <_printf_i+0x1e6>
 8005f1a:	1b80      	subs	r0, r0, r6
 8005f1c:	6060      	str	r0, [r4, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	2300      	movs	r3, #0
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f28:	e7aa      	b.n	8005e80 <_printf_i+0x148>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4640      	mov	r0, r8
 8005f32:	47d0      	blx	sl
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0ad      	beq.n	8005e94 <_printf_i+0x15c>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	d413      	bmi.n	8005f66 <_printf_i+0x22e>
 8005f3e:	68e0      	ldr	r0, [r4, #12]
 8005f40:	9b03      	ldr	r3, [sp, #12]
 8005f42:	4298      	cmp	r0, r3
 8005f44:	bfb8      	it	lt
 8005f46:	4618      	movlt	r0, r3
 8005f48:	e7a6      	b.n	8005e98 <_printf_i+0x160>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	47d0      	blx	sl
 8005f54:	3001      	adds	r0, #1
 8005f56:	d09d      	beq.n	8005e94 <_printf_i+0x15c>
 8005f58:	3501      	adds	r5, #1
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	9903      	ldr	r1, [sp, #12]
 8005f5e:	1a5b      	subs	r3, r3, r1
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	dcf2      	bgt.n	8005f4a <_printf_i+0x212>
 8005f64:	e7eb      	b.n	8005f3e <_printf_i+0x206>
 8005f66:	2500      	movs	r5, #0
 8005f68:	f104 0619 	add.w	r6, r4, #25
 8005f6c:	e7f5      	b.n	8005f5a <_printf_i+0x222>
 8005f6e:	bf00      	nop
 8005f70:	080061f5 	.word	0x080061f5
 8005f74:	08006206 	.word	0x08006206

08005f78 <memmove>:
 8005f78:	4288      	cmp	r0, r1
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	eb01 0402 	add.w	r4, r1, r2
 8005f80:	d902      	bls.n	8005f88 <memmove+0x10>
 8005f82:	4284      	cmp	r4, r0
 8005f84:	4623      	mov	r3, r4
 8005f86:	d807      	bhi.n	8005f98 <memmove+0x20>
 8005f88:	1e43      	subs	r3, r0, #1
 8005f8a:	42a1      	cmp	r1, r4
 8005f8c:	d008      	beq.n	8005fa0 <memmove+0x28>
 8005f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f96:	e7f8      	b.n	8005f8a <memmove+0x12>
 8005f98:	4402      	add	r2, r0
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	428a      	cmp	r2, r1
 8005f9e:	d100      	bne.n	8005fa2 <memmove+0x2a>
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005faa:	e7f7      	b.n	8005f9c <memmove+0x24>

08005fac <_sbrk_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	@ (8005fc8 <_sbrk_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fa ff24 	bl	8000e04 <_sbrk>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_sbrk_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_sbrk_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	200131c0 	.word	0x200131c0

08005fcc <_realloc_r>:
 8005fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4615      	mov	r5, r2
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	b921      	cbnz	r1, 8005fe2 <_realloc_r+0x16>
 8005fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	4611      	mov	r1, r2
 8005fde:	f7ff bc59 	b.w	8005894 <_malloc_r>
 8005fe2:	b92a      	cbnz	r2, 8005ff0 <_realloc_r+0x24>
 8005fe4:	f7ff fbea 	bl	80057bc <_free_r>
 8005fe8:	2400      	movs	r4, #0
 8005fea:	4620      	mov	r0, r4
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	f000 f81a 	bl	8006028 <_malloc_usable_size_r>
 8005ff4:	4285      	cmp	r5, r0
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	d802      	bhi.n	8006000 <_realloc_r+0x34>
 8005ffa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ffe:	d8f4      	bhi.n	8005fea <_realloc_r+0x1e>
 8006000:	4629      	mov	r1, r5
 8006002:	4640      	mov	r0, r8
 8006004:	f7ff fc46 	bl	8005894 <_malloc_r>
 8006008:	4607      	mov	r7, r0
 800600a:	2800      	cmp	r0, #0
 800600c:	d0ec      	beq.n	8005fe8 <_realloc_r+0x1c>
 800600e:	42b5      	cmp	r5, r6
 8006010:	462a      	mov	r2, r5
 8006012:	4621      	mov	r1, r4
 8006014:	bf28      	it	cs
 8006016:	4632      	movcs	r2, r6
 8006018:	f7ff fbc2 	bl	80057a0 <memcpy>
 800601c:	4621      	mov	r1, r4
 800601e:	4640      	mov	r0, r8
 8006020:	f7ff fbcc 	bl	80057bc <_free_r>
 8006024:	463c      	mov	r4, r7
 8006026:	e7e0      	b.n	8005fea <_realloc_r+0x1e>

08006028 <_malloc_usable_size_r>:
 8006028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800602c:	1f18      	subs	r0, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	bfbc      	itt	lt
 8006032:	580b      	ldrlt	r3, [r1, r0]
 8006034:	18c0      	addlt	r0, r0, r3
 8006036:	4770      	bx	lr

08006038 <_init>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr

08006044 <_fini>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr
